<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>yhcho0405</title>
    <link>https://yhcho0405.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>내가 보려고 쓰는 블로그</description>
    <pubDate>Tue, 17 Mar 2020 04:07:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[C++]스택(Stack)과 큐(Queue)</title>
      <link>https://yhcho0405.github.io/2020/03/17/20200317-algorithm-theory7/</link>
      <guid>https://yhcho0405.github.io/2020/03/17/20200317-algorithm-theory7/</guid>
      <pubDate>Tue, 17 Mar 2020 04:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;스택과 큐는 선형구조로 분류되는 자료구조 중 대표적인 예시이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>스택과 큐는 선형구조로 분류되는 자료구조 중 대표적인 예시이다.</p><a id="more"></a><ul><li>스택(Stack)<ul><li>push(element) : top에 원소를 추가</li><li>pop() : top에 있는 원소를 삭제</li><li>top() : top에 있는 원소를 반환</li><li>empty() : 스택이 비어있으면 true 아니면 false를 반환</li><li>size() : 스택 사이즈를 반환<br>![wikipedia](https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/450px-Data_stack.svg.png)</li></ul></li></ul><br><ul><li>큐(Queue)<ul><li>push(element) : 큐 뒤에 원소를 추가</li><li>pop() : 큐 앞에 있는 원소를 삭제</li><li>front() : 큐 제일 앞에 있는 원소를 반환</li><li>back() : 큐 제일 뒤에 있는 원소를 반환</li><li>empty() : 큐가 비어있으면 true 아니면 false를 반환</li><li>size() : 큐 사이즈를 반환</li></ul></li></ul><br><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/450px-Data_Queue.svg.png" alt="wikipedia"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">s.push(<span class="number">1</span>);</span><br><span class="line">s.push(<span class="number">2</span>);</span><br><span class="line">s.push(<span class="number">3</span>);</span><br><span class="line">s.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (s.empty() ? <span class="string">"empty"</span> : <span class="string">"!empty"</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">q.push(<span class="number">2</span>);</span><br><span class="line">q.push(<span class="number">3</span>);</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (q.empty() ? <span class="string">"empty"</span> : <span class="string">"!empty"</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/17/20200317-algorithm-theory7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1202 - 보석 도둑</title>
      <link>https://yhcho0405.github.io/2020/03/16/20200316-boj1202/</link>
      <guid>https://yhcho0405.github.io/2020/03/16/20200316-boj1202/</guid>
      <pubDate>Mon, 16 Mar 2020 10:29:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;처음엔 무식하게 2중 for문으로 돌려보았다.&lt;br&gt;맞겠지 싶었는데 시간초과가 떴다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>처음엔 무식하게 2중 for문으로 돌려보았다.<br>맞겠지 싶었는데 시간초과가 떴다.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">p b[<span class="number">300001</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; a, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.first == b.first) <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line"><span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b[i].second &gt;&gt; b[i].first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(b, b + n, com);</span><br><span class="line">sort(c, c + k);</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(c[i] &gt;= b[j].second) &#123;</span><br><span class="line">total += b[j].first;</span><br><span class="line">b[j].second = INT_MAX;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시간초과가 떴기 때문에 논리가 맞고 틀리고는 모르지만 맞다고 생각하기로 했다.<br><br><br>생각해보니 n과 k가 300,000이라 가정했을 때 최악의 경우 2중 for문에서 300,000^2 번 연산하므로 제한시간 1초는 터무니없었다.<br><br><br>구글링해보니 우선순위 큐를 사용하더라<br>우선순위 큐를 얕게 핥아봤다.<br><br><br>우선순위 큐는 비선형자료구조로써 넣은 순서와 상관없이 우선순위대로 나간다.<br><br><br>max heap의 형태로 원소들이 저장되어 있다고 한다.<br>굉장한 우연으로 이거 풀기 전에 힙 정렬을 공부하고 왔다.</p><p>위 코드를 변형해서 우선순위 큐가지고 짜봤다.</p><ol><li>보석과 가방을 무게기준으로 오름차순 정렬한다.</li><li>가방 무게가 작은 것부터 for문을 돌며 그 가방에 들어갈 수 있는 보석을 우선순위 큐에 넣는다.</li><li>가장 큰 요소를 큐어서 빼서 total에 더한다.</li><li>반복한다.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; pq;</span><br><span class="line">p b[<span class="number">300001</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b[i].first &gt;&gt; b[i].second;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">sort(b, b + n);</span><br><span class="line">sort(c, c + k);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n &amp;&amp; b[j].first &lt;= c[i])</span><br><span class="line">pq.push(b[j++].second);</span><br><span class="line"><span class="keyword">if</span>(!pq.empty()) &#123;</span><br><span class="line">total += pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>맞았다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/16/20200316-boj1202/#disqus_thread</comments>
    </item>
    
    <item>
      <title>힙 정렬(Heap Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/16/20200316-algorithm-theory6/</link>
      <guid>https://yhcho0405.github.io/2020/03/16/20200316-algorithm-theory6/</guid>
      <pubDate>Mon, 16 Mar 2020 04:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;최대 힙 트리나 최소 힙 트리를 구현해 정렬하는 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
&lt;p&gt;트리 구조로 보여주는 움짤을 찾아보려 했으나 귀찮았다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>최대 힙 트리나 최소 힙 트리를 구현해 정렬하는 방법이다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif" alt="wikipedia"></p><p>트리 구조로 보여주는 움짤을 찾아보려 했으나 귀찮았다.</p><a id="more"></a><p>n개의 노드에 대해 완전 이진 트리를 구성한다.<br>heapify과정을 통해 부모노드의 요소가 자식노드의 요소보다 크도록 만든다.<br>가장 첫번째 요소와 가장 마지막 요소를 swap후 다시 heapify한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> heap[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> c = i;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">int</span> root = (c - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(heap[root] &lt; heap[c]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = heap[root];</span><br><span class="line">heap[root] = heap[c];</span><br><span class="line">heap[c] = temp;</span><br><span class="line">&#125;</span><br><span class="line">c = root;</span><br><span class="line">&#125; <span class="keyword">while</span>(c != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = heap[<span class="number">0</span>];</span><br><span class="line">heap[<span class="number">0</span>] = heap[i];</span><br><span class="line">heap[i] = temp;</span><br><span class="line"><span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">c = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(heap[c] &lt; heap[c + <span class="number">1</span>] &amp;&amp; c &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(heap[root] &lt; heap[c] &amp;&amp; c &lt; i) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = heap[root];</span><br><span class="line">heap[root] = heap[c];</span><br><span class="line">heap[c] = temp;</span><br><span class="line">&#125;</span><br><span class="line">root = c;</span><br><span class="line">&#125; <span class="keyword">while</span>(c &lt; i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; heap[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 최대 힙 트리를 통해 정렬한다.</p><blockquote><p>최대 힙 트리는 부모노드의 요소가 자식노드의 요소보다 크다.</p></blockquote><br><p>추가적인 메모리를 필요로 하지 않으면서 모든 경우에 대해 O(NlogN)의 시간복잡도를 보장받는다.<br>만능처럼 보이지만 실제로는 퀵소트가 더 빠르고 데이터의 상태에 따른 편차가 발생한다. 또 stable을 보장받지 못한다.</p><blockquote><p>heapify과정은 트리의 깊이 만큼 진행되므로 logN 만큼 수행하고 swap하는 과정을 n번 하면 정렬되므로 O(NlogN)의 시간복잡도가 나온다.</p></blockquote><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">heap</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/16/20200316-algorithm-theory6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>병합 정렬(Merge Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/15/20200315-algorithm-theory5/</link>
      <guid>https://yhcho0405.github.io/2020/03/15/20200315-algorithm-theory5/</guid>
      <pubDate>Sun, 15 Mar 2020 10:53:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;퀵소트와 마찬가지로 분할정복 알고리즘이다.&lt;br&gt;재귀함수를 이용해 배열을 절반으로 잘라가며 분할하고 정복한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>퀵소트와 마찬가지로 분할정복 알고리즘이다.<br>재귀함수를 이용해 배열을 절반으로 잘라가며 분할하고 정복한다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif" alt="wikipedia"></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m, <span class="keyword">int</span> mid, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = m;</span><br><span class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = m;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt;= a[j]) &#123;</span><br><span class="line">arr[k] = a[i];</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr[k] = a[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &gt; mid) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = j; t &lt;= n; t++) &#123;</span><br><span class="line">arr[k] = a[t];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = i; t &lt;= mid; t++) &#123;</span><br><span class="line">arr[k] = a[t];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = m; t &lt;= n; t++) &#123;</span><br><span class="line">a[t] = arr[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m &lt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (m + n) / <span class="number">2</span>;</span><br><span class="line">mergeSort(a, m, mid);</span><br><span class="line">mergeSort(a, mid + <span class="number">1</span>, n);</span><br><span class="line">merge(a, m, mid, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line">mergeSort(<span class="built_in">array</span>, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 mergeSort()함수는 재귀함수로써 배열을 절반으로 나눠가며 merge()함수를 호출하고, merge()함수에서는 요소들을 비교하며 정렬하는 정복 과정을 수행한다.</p><blockquote><p>mergeSort()는 분할, merge()는 정복의 역할을 한다.</p></blockquote><br><p>피봇에 따라 성능이 다른 퀵소트와 다르게 무조건 절반으로 분할하기 때문에 모든 경우에서 O(NlogN)의 시간복잡도를 보장받는다.<br>다만 데이터를 담을 추가적인 공간이 필요하기 때문에 메모리 측면에서 비효율적이다.</p><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">merge</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(n)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/15/20200315-algorithm-theory5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>퀵 정렬(Quick Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/14/20200314-algorithm-theory4/</link>
      <guid>https://yhcho0405.github.io/2020/03/14/20200314-algorithm-theory4/</guid>
      <pubDate>Sat, 14 Mar 2020 03:22:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;분할 정복 알고리즘의 대표적인 예시이며 피봇을 기준으로 정렬해 나가는 정렬 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>분할 정복 알고리즘의 대표적인 예시이며 피봇을 기준으로 정렬해 나가는 정렬 방법이다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif" alt="wikipedia"></p><a id="more"></a><p>분할과정과 정복과정으로 나누어져 있으며, 피봇을 정한 뒤 피봇을 기준으로 작거나 큰것으로 나눠간다.<br>퀵소트의 피봇 선정 방식은 여러가지가 존재한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &gt;= end) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> key = start;</span><br><span class="line"><span class="keyword">int</span> i = start + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = end;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line"><span class="keyword">while</span>(arr[i] &lt;= arr[key]) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt;= arr[key] &amp;&amp; j &gt; start) &#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &gt; j) &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[key];</span><br><span class="line">arr[key] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">arr[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">quickSort(arr, start, j - <span class="number">1</span>);</span><br><span class="line">quickSort(arr, j + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">quickSort(arr, <span class="number">0</span>, num - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드는 피봇을 왼쪽의 요소로 잡는 알고리즘이다.<br><br><br>퀵소트는 이름에서 알 수 있드시 매우 빠른 정렬 알고리즘에 속한다.<br>하지만 최악의 경우 n^2으로 작동할 여지가 있다.<br>아이러니하게도 최악의 경우는 배열이 이미 정렬 되어있을 때 발생한다.<br><br><br>이 문제를 해결하기 위해 피봇을 랜덤으로 선정하거나 중위법을 이용하는 방법, 작은 분할 범위의 정렬은 삽입정렬을 이용하는 방법등이 있다.</p><blockquote><p>여담으로 C++ STL #include &lt;algorithm&gt; 라이브러리의 sort() 함수는 퀵소트를 기반으로 작성되었다.<br>(모든 경우에서 O(n log n)을 보장한다.)</p></blockquote><br><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">quick</td><td align="center">O(NlogN)</td><td align="center">O(N^2)</td><td align="center">O(NlogN)</td><td align="center">O(logN)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/14/20200314-algorithm-theory4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>삽입 정렬(Insertion Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory3/</link>
      <guid>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory3/</guid>
      <pubDate>Mon, 09 Mar 2020 05:24:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;배열의 모든 요소를 앞에서부터 이미 정렬된 배열과 비교하여 적절한 위치를 찾는 정렬 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.geeksforgeeks.org/wp-content/uploads/insertionsort.png&quot; alt=&quot;geeksforgeeks&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>배열의 모든 요소를 앞에서부터 이미 정렬된 배열과 비교하여 적절한 위치를 찾는 정렬 방법이다.</p><p><img src="https://media.geeksforgeeks.org/wp-content/uploads/insertionsort.png" alt="geeksforgeeks"></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp, arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>최악의 경우<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6fd040d16ddcc273c6928e0e06485727f2c3c2cf" alt="wikipedia"><br>번의 비교를 하게 되므로, O(n^2) 가 된다.<br><br><br>역시나 선택정렬이나 버블정렬과 같은 시간복잡도를 가지지만 실제론 삽입정렬이 가장 빠르다.<br>필요할 때만 위치를 바꾸기 때문에 거의 정렬이 된 상태일 때 가장 빠르고, 자원을 덜 사용하여 효율적으로 작동한다.<br>때문에 다른 정렬 알고리즘의 일부로 사용되는 경우가 있다.<br><br></p><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">insert</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(N)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>버블 정렬(Bubble Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory2/</link>
      <guid>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory2/</guid>
      <pubDate>Mon, 09 Mar 2020 01:10:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;인접한 두 원소를 비교하며 정렬하는 방법이다.&lt;br&gt;학기 초에 자주 접해서 익숙하다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 움짤은 마약같다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>인접한 두 원소를 비교하며 정렬하는 방법이다.<br>학기 초에 자주 접해서 익숙하다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif" alt="wikipedia"></p><p>위 움짤은 마약같다.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp, arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시간 복잡도는 선택정렬과 동일하다.<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/022f41f8c29a0da175bc0d4f84c53a8046e6cb8f" alt="wikipedia"><br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5042a309a9d1de0d8c89443c1950dd1e28a802e3" alt="wikipedia"><br>O(n^2) 가 된다.<br><br><br>하지만 선택 정렬보다 느리게 작동한다.<br>버블정렬은 매번 인접한 원소의 자리를 바꿔줘야 하지만 선택정렬은 배열에서 가장 작은 원소의 자리만 바꿔주면 되기 때문에 연산하는 양에서 차이가 발생한다.</p><br><p>위 코드에 실행 중 스왑이 안 발생할 시 break 해주면 성능을 높일 수 있다.</p><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">bubble</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>선택 정렬(Selection Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory1/</link>
      <guid>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory1/</guid>
      <pubDate>Mon, 09 Mar 2020 01:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;주어진 배열에서 가장 작은 숫자를 앞으로 옮겨가며 정렬하는 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/5ai2E.jpg&quot; alt=&quot;stackoverflow&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>주어진 배열에서 가장 작은 숫자를 앞으로 옮겨가며 정렬하는 방법이다.</p><p><img src="https://i.stack.imgur.com/5ai2E.jpg" alt="stackoverflow"></p><a id="more"></a><br><p>#include &lt;climits&gt; 는 자료형의 최대, 최소값이 정의된 헤더파일이다.  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> min, idx, tmp, arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">min = INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(min &gt; arr[j]) &#123;</span><br><span class="line">min = arr[j];</span><br><span class="line">idx = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tmp = arr[i];</span><br><span class="line">arr[i] = arr[idx];</span><br><span class="line">arr[idx] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>흔히 ‘정렬’이라는 주제를 떠올렸을 때 가장 직관적으로 떠올릴 수 있는 방법 중 하나인 만큼 비 효율적이다.</p><p>알고리즘의 성능을 분석할 때 시간복잡도라는 척도를 사용한다고 한다.</p><p>n개의 수를 정렬한다면<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/022f41f8c29a0da175bc0d4f84c53a8046e6cb8f" alt="wikipedia"><br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5042a309a9d1de0d8c89443c1950dd1e28a802e3" alt="wikipedia"><br>위 식을 빅 오 표기법으로 나타내면 O(n^2) 가 된다.</p><br><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">select</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>밴드 동아리 스케줄러 만들기</title>
      <link>https://yhcho0405.github.io/2020/03/03/20200303-cpp-project-bandscheduler/</link>
      <guid>https://yhcho0405.github.io/2020/03/03/20200303-cpp-project-bandscheduler/</guid>
      <pubDate>Mon, 02 Mar 2020 18:10:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;내가 만들고 싶은건 아니고 부탁받았다.&lt;br&gt;내용은 아래와 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;팀은 월 화 수 목 금&lt;/li&gt;
&lt;li&gt;세션은 보컬 신디 베이스 기타 드럼&lt;/li&gt;
&lt;li&gt;각 팀마다 세션에 들어가는 인원이 최소 한 명 이상은 있어야 함&lt;/li&gt;
&lt;li&gt;팀의 특정 세션의 최소, 최대 인원수를 정하고 돌릴 수 있으면 좋겠음&lt;/li&gt;
&lt;li&gt;ex) 월요일팀 보컬 1~2 기타 1~3 베이스 2 신디 2~3 드럼 2&lt;/li&gt;
&lt;li&gt;이름, 가능한 세션(복수선택 가능), 가능한요일(복수선택 가능), 희망하는 최대 팀 개수를 입력&lt;/li&gt;
&lt;li&gt;팀을 짤 때 둘 이상의 세션에 한 사람만 들어가면 안됨&lt;/li&gt;
&lt;li&gt;ex) 보컬 A, 기타 A, 신디 B, 베이스 C, 드럼 D&lt;/li&gt;
&lt;li&gt;희망하는 최대 팀 개수가 2 이상인 사람을 팀에 그보다 적게 넣어도 팀이 짜진다면 굳이 더 넣을 필요 없음&lt;/li&gt;
&lt;li&gt;꼭 한 팀에 붙어야 되는 사람을 정할 수 있으면 좋겠음 (희망사항ㅎㅎ)&lt;/li&gt;
&lt;li&gt;ex) E랑 F는 꼭 같은 팀이어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>내가 만들고 싶은건 아니고 부탁받았다.<br>내용은 아래와 같다.</p><blockquote><ul><li>팀은 월 화 수 목 금</li><li>세션은 보컬 신디 베이스 기타 드럼</li><li>각 팀마다 세션에 들어가는 인원이 최소 한 명 이상은 있어야 함</li><li>팀의 특정 세션의 최소, 최대 인원수를 정하고 돌릴 수 있으면 좋겠음</li><li>ex) 월요일팀 보컬 1~2 기타 1~3 베이스 2 신디 2~3 드럼 2</li><li>이름, 가능한 세션(복수선택 가능), 가능한요일(복수선택 가능), 희망하는 최대 팀 개수를 입력</li><li>팀을 짤 때 둘 이상의 세션에 한 사람만 들어가면 안됨</li><li>ex) 보컬 A, 기타 A, 신디 B, 베이스 C, 드럼 D</li><li>희망하는 최대 팀 개수가 2 이상인 사람을 팀에 그보다 적게 넣어도 팀이 짜진다면 굳이 더 넣을 필요 없음</li><li>꼭 한 팀에 붙어야 되는 사람을 정할 수 있으면 좋겠음 (희망사항ㅎㅎ)</li><li>ex) E랑 F는 꼭 같은 팀이어야 한다.</li></ul></blockquote><a id="more"></a><p>c++ 기반으로 작성할 예정이고 파일 입출력을 통해 동아리원들 정보를 받고 시간표를 출력한다.<br>자고 일어나서 만들자.</p><br>일어났다.동아리원이 30명 정도이기 때문에 최소의 경우로 인당 단 하루 한개의 세션을 선택해도 경우의 수는 아래와 같다.$$25^{30}$$계산기피셜 자릿수만 42자리다.모든 경우의 수를 다 대입해보는 것은 무리라고 생각했고 최적의 시간표를 만드는 방법을 찾아야 했다.<br><p>우선 개인별로 아래와 같은 하나의 시간표를 가진다.<br>예를 들어 A라는 사람은 화, 수, 목요일에 출석이 가능하고 기타와 베이스를 다룰줄 안다고 가정하자.</p><blockquote><p>보컬:V 기타:G 베이스:B 신디:S 드럼:D</p></blockquote><br><p><strong>A의 시간표</strong></p><hr><table><thead><tr><th align="left"></th><th align="center">월</th><th align="center">화</th><th align="center">수</th><th align="center">목</th><th align="center">금</th></tr></thead><tbody><tr><td align="left">V</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">G</td><td align="center"></td><td align="center">O</td><td align="center">O</td><td align="center">O</td><td align="center"></td></tr><tr><td align="left">B</td><td align="center"></td><td align="center">O</td><td align="center">O</td><td align="center">O</td><td align="center"></td></tr><tr><td align="left">S</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">D</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>개인별로 저런 형태의 시간표를 가지고 이를 3차원 배열로 저장한다.</p><p>다음으로 모든 시간표들로부터 각 칸의 빈도수를 저장할 2차원 배열을 만든다.</p><br><p><strong>빈도수</strong></p><hr><table><thead><tr><th align="left"></th><th align="center">월</th><th align="center">화</th><th align="center">수</th><th align="center">목</th><th align="center">금</th></tr></thead><tbody><tr><td align="left">V</td><td align="center">3</td><td align="center">2</td><td align="center">3</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="left">G</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="left">B</td><td align="center">3</td><td align="center">2</td><td align="center">3</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="left">S</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="left">D</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>숫자가 클 수록 상대적으로 널널한 시간대라고 볼 수 있다.</p><p>여기서 각 시간대별로 사용자가 미리 저장해둔 최소인원을 빼면 그 시간대에 움직임이 자유로운 가용인원 즉, 후에 가중치로 사용될 표가 생성된다.</p><br><p>시간대가 비어있어서 시간표 생성이 불가능하거나 최소인원보다 적게 인원이 집계된 경우와 같은 예외처리를 해준다.<br><br></p><p>모든 준비를 마치면 모든 사람의 시간표들을 체크하며 세로선당 가중치가 가장 작은 부분의 스케줄을 제외하고 모두 삭제한다.<br>이후 희망하는 최대 요일 수 만큼 남을 때 까지 가중치가 큰 순서대로 제외한다.</p><br>문제점을 발견했다.쓰기 귀찮아서 사진으로 대체한다.<p><img src="/image-in-post/20200304_bandscheduler.jpg" alt="notescan"></p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/03/20200303-cpp-project-bandscheduler/#disqus_thread</comments>
    </item>
    
    <item>
      <title>크롬 확장프로그램 개발 일지</title>
      <link>https://yhcho0405.github.io/2020/01/31/20200131-js-chrome-extension/</link>
      <guid>https://yhcho0405.github.io/2020/01/31/20200131-js-chrome-extension/</guid>
      <pubDate>Fri, 31 Jan 2020 13:13:01 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;크롬 확장 프로그램에 갑자기 꽂혀서 방학 때 낭비되는 시간도 아깝고 공부도 할겸 시작했다.&lt;br&gt;웹과 자바스크립트에 대해 무지한 상태에서 시작한 터라 시행착오를 많이 겪었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2019년-12월-23일-노베이스-개발-시작&quot;&gt;&lt;a href=&quot;#2019년-12월-23일-노베이스-개발-시작&quot; class=&quot;headerlink&quot; title=&quot;2019년 12월 23일 노베이스 개발 시작&quot;&gt;&lt;/a&gt;2019년 12월 23일 노베이스 개발 시작&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;크롬 익스텐션으로 주제 설정.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;구글링해가며 구동방식 이해.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;개발할 기능 구상.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;유튜브 동영상 시청 시, 시청중인 위치를 영상 제목과 함께 북마크해 모아주는 기능 구상.(onetab에서 아이디어 얻음)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;현재 시청중인 분, 초를 가져올 방법을 생각해야 함.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;html body태그에서 모든 단어들을 가져오기 =&amp;gt; 띄어쓰기로 스플릿 해서 구분 =&amp;gt; 줄바꿈으로 스플릿해서 분, 초 가 담긴 인덱스로 화면에 출력까지 성공.(아마 더 쉽게하는 방법이 있을 것)&lt;/p&gt;
&lt;p&gt;문제점&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html로 현재 재생중인 부분을 가져오다 보니 영상 시청 중 아래 타임라인이 사라지면 사라지기 직전의 시간을 가져온다는 점.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;추가 할 기능&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;여러개의 북마크를 어떻게 보여줄지.&lt;/li&gt;
&lt;li&gt;북마크된 링크로 넘어가는 방식은 어떻게 할지(링크누르기?, 버튼누르기?)
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>크롬 확장 프로그램에 갑자기 꽂혀서 방학 때 낭비되는 시간도 아깝고 공부도 할겸 시작했다.<br>웹과 자바스크립트에 대해 무지한 상태에서 시작한 터라 시행착오를 많이 겪었다.</p></blockquote><h2 id="2019년-12월-23일-노베이스-개발-시작"><a href="#2019년-12월-23일-노베이스-개발-시작" class="headerlink" title="2019년 12월 23일 노베이스 개발 시작"></a>2019년 12월 23일 노베이스 개발 시작</h2><hr><ul><li><p>크롬 익스텐션으로 주제 설정.</p></li><li><p>구글링해가며 구동방식 이해.</p></li><li><p>개발할 기능 구상.</p></li><li><p>유튜브 동영상 시청 시, 시청중인 위치를 영상 제목과 함께 북마크해 모아주는 기능 구상.(onetab에서 아이디어 얻음)</p></li><li><p>현재 시청중인 분, 초를 가져올 방법을 생각해야 함.</p></li><li><p>html body태그에서 모든 단어들을 가져오기 =&gt; 띄어쓰기로 스플릿 해서 구분 =&gt; 줄바꿈으로 스플릿해서 분, 초 가 담긴 인덱스로 화면에 출력까지 성공.(아마 더 쉽게하는 방법이 있을 것)</p><p>문제점</p><ol><li>html로 현재 재생중인 부분을 가져오다 보니 영상 시청 중 아래 타임라인이 사라지면 사라지기 직전의 시간을 가져온다는 점.</li></ol><p>추가 할 기능</p><ol><li>여러개의 북마크를 어떻게 보여줄지.</li><li>북마크된 링크로 넘어가는 방식은 어떻게 할지(링크누르기?, 버튼누르기?)<a id="more"></a>아이디어</li><li>유튜브 링크 뒤에 시간을 붙이면 그 시간대로 영상이 재생된다.</li></ol></li></ul><h2 id="2019년-12월-24일"><a href="#2019년-12월-24일" class="headerlink" title="2019년 12월 24일"></a>2019년 12월 24일</h2><hr><ul><li><p>유튜브 게시자의 프로필사진을 불러와 보여주는 기능 구상.</p></li><li><p>추출해야할 jpg파일의 src값 img태그의 class이름까지는 구했는데 자바스크립트에서 이를 받아올 방법을 찾아야 함.</p></li><li><p>jquery를 이용해 보려 했으나 실패.</p></li><li><p>북마킹 버튼 디자인(오픈소스 활용)</p><p>문제점</p><ol><li>위에서 말했던 대로 jquery를 못 쓰고 js로만 해보려 했으나 안됨.</li><li>아직도 23일 문제점 1을 해결하지 못함.</li></ol><p>추가 할 기능</p><ol><li>북마크된 정보에 프로필사진과 채널 명, 제목 일부를 보여줄 레이아웃 구상.</li><li>크롬 내부저장소에 북마크 된 정보를 저장.</li></ol><p>아이디어</p><ol><li>채널 프로필 사진을 함께 보여주어 정보확인 부분에서의 명확성을 높힘.</li></ol></li></ul><h2 id="2019년-12월-25일"><a href="#2019년-12월-25일" class="headerlink" title="2019년 12월 25일"></a>2019년 12월 25일</h2><hr><ul><li>새로운 확장프로그램 아이디어 생겨서 병행하느라 별로 못함.</li></ul><h2 id="2019년-12월-26일"><a href="#2019년-12월-26일" class="headerlink" title="2019년 12월 26일"></a>2019년 12월 26일</h2><hr><ul><li><p>게시자의 프로필 사진을 가져오는 것 보단 썸네일을 가져오는게 가시성이 더 높을 것이라 판단.</p></li><li><p>썸네일을 html iframe으로 불러오는데 성공.</p></li><li><p>링크와 합쳐 화면에 띄우는 데 성공.</p></li><li><p>삭제버튼 추가.</p><p>문제점</p><ol><li>썸네일 위 아래로 검은색 여백이 생간다.</li><li>크기를 강제로 줄이면 아래쪽 썸네일이 잘리기 때문에 해결하지 못한다.</li></ol></li></ul><h2 id="2019년-12월-27일"><a href="#2019년-12월-27일" class="headerlink" title="2019년 12월 27일"></a>2019년 12월 27일</h2><hr><ul><li><p>전체적인 레이아웃 수정.</p></li><li><p>제목 가져와서 화면에 표시하기 성공.</p></li><li><p>제목 string으로 형변환 후 “ - YouTube” 삭제.</p></li><li><p>뒤늦은 오류 발견.(해결)</p><ul><li>타이틀을 가져올 때 알람의 수 만큼 제목 앞에 붙어서 출력되는 문제 수정.</li><li>현재 시간을 가져올 때 가끔 인덱스 참조 예외가 생기는 문제 수정. (추후 유튜브 UI가 업데이트 되면 다시 발생할 가능성이 있기 때문에 오류코드와 이메일 삽입)</li></ul><p>문제점</p><ol><li>디자인 수정 필요.</li><li>크롬 저장소 활용해야 함.</li><li>youtube에서만 작동하도록 예외처리가 안됨.</li><li>버튼이 사라지게 하는 방법 찾기.</li></ol><p>추가할 점</p><ol><li>버튼의 활용 및 레이아웃 구상.</li></ol></li></ul><h2 id="2019년-12월-28일"><a href="#2019년-12월-28일" class="headerlink" title="2019년 12월 28일"></a>2019년 12월 28일</h2><hr><ul><li><p>유튜브에서만 동작할 수 있도록 예외처리 함.</p></li><li><p>제목 자르기 부분의 오류 확인 및 수정.(알람에 9+가 떴을 경우 외 여러가지 상황에 유동적으로 반응하게끔)</p></li><li><p>유튜브 안에는 있지만 동영상을 시청하지 않는 상황에 대한 예외처리 완료.</p><p>문제점</p><ol><li>동영상이 끝났을 때 에러코드 출력함. 예외처리 필요.</li><li>크롬 익스텐션에선 html의 인라인 함수를 보안상의 이유로 막아놈.(인라인 onclick 사용 불가)</li><li>2번의 이유로 js파일 내부에서 버튼 클릭 이벤트를 만들었으나, html 파일의 형식으로 insertBefore메서드를 사용할 방법을 찾아야 함.</li></ol><p>아이디어</p><ol><li>북마크가 쌓이면서 스크롤이 내려간다면 북마크 버튼의 위치를 유동적으로 바꾸는 방법이 있으면 좋겠다.</li></ol></li></ul><h2 id="2019년-12월-29일"><a href="#2019년-12월-29일" class="headerlink" title="2019년 12월 29일"></a>2019년 12월 29일</h2><hr><ul><li><p>insertBefore 메소드를 사용하지 않고 append로 처리해 클릭하면 현재의 창이 스크랩 되도록 함.</p></li><li><p>크롬 스토리지 기능을 사용해 북마크를 자동으로 저장하고 가져오는 기능 추가.</p></li><li><p>delete all 버튼도 기능 부여.</p></li><li><p>스토리지 기능 사용하며 코드 구조 수정.</p></li><li><p>예외처리 때문에 유튜브 밖에서 기록 삭제가 안되는 오류 수정.</p></li><li><p>썸네일 가져오는 방식을 iframe에서 img로 바꿈.</p></li><li><p>썸네일 상하 여백 크롭.</p><p>문제점</p><ol><li>익스텐션에서 a태그를 사용할 수 없다.</li></ol><p>추가할 점</p><ol><li>썸네일과 제목 클릭 시 하이퍼링크.</li><li>레이아웃 수정.</li><li>알수 없는 크롬저장소 오류 원인 찾기.</li></ol><p>발견 된 오류</p><ol><li>정상 작동 하나, 가끔 삭제 후 다시 들어가보면 다시 생겨있거나 이전의 기록과 합쳐짐.</li></ol></li></ul><h2 id="2019년-12월-30일"><a href="#2019년-12월-30일" class="headerlink" title="2019년 12월 30일"></a>2019년 12월 30일</h2><hr><ul><li><p>디자인 레이아웃 수정.</p></li><li><p>하이퍼링크 기능 활성화.</p></li><li><p>썸네일 테두리 둥글게 처리.</p></li><li><p>제목 2줄이상 오버플로우는 hidden처리.</p></li><li><p>실시간 영상의 경우 인덱스 오류 발생.</p></li><li><p>인덱스 참조에러가 알림의 유, 무와 관련있다는 사실 파악.</p></li><li><p>29일 발생한 오류 1번을 해결함.</p></li><li><p>시간 가져오는 방식 갈아엎음.(27일 발생한 인덱스 참조 오류의 원인 자체를 없앰.)</p><p>문제점</p><ol><li>16개 밖에 저장하지 못함.(string이 담을 수 있는 최대용량을 넘은것은 터무니없고 크롬 스토리지도 5mb까지 지원하기 때문에 충분하다. 아마 구조체 형식으로 처리해야 할 듯 하다.)<ul><li>chrome.storage.sync는 용량제한 100kb가 걸려있다는 사실 알게됨.(local은 제한 없어서 그거 썼다)</li></ul></li></ol></li></ul><h2 id="2019년-12월-31일"><a href="#2019년-12월-31일" class="headerlink" title="2019년 12월 31일"></a>2019년 12월 31일</h2><hr><ul><li>개별 삭제 버튼 추가.</li></ul><h2 id="2020년-1월-1일"><a href="#2020년-1월-1일" class="headerlink" title="2020년 1월 1일"></a>2020년 1월 1일</h2><hr><ul><li>id값은 고유해야 함.</li><li>개별삭제기능 구현.</li><li>아직 오류있음.</li><li>오류해결</li><li>초반에 기획했던 기능은 모두 구현 완료.</li></ul><h2 id="2020년-1월-2일"><a href="#2020년-1월-2일" class="headerlink" title="2020년 1월 2일"></a>2020년 1월 2일</h2><hr><ul><li>처음 사용자에게 발생하는 undefined 오류에 안내말 삽입.</li><li>1차 디버깅, 오류는 위 사항 말고 발견되지 않음.</li></ul><h2 id="2020년-1월-31일"><a href="#2020년-1월-31일" class="headerlink" title="2020년 1월 31일"></a>2020년 1월 31일</h2><hr><ul><li>처음 사용자에게 발생하는 저장소 오류에 대한 예외처리 코드 추가.</li><li>크롬 웹 스토어에 등록 거부됨. 재등록 후 등록 심사중.</li></ul><br><blockquote><p>최종적으론 크롬 웹 스토어에 등록을 성공했으며 블로그 좌측 배너에 링크되어 있다. 혹은 <a href="https://chrome.google.com/webstore/detail/youtubookmark-bookmark-yo/fhbaihahknhibdhgddjnekoffmjbpikm" rel="external nofollow noopener noreferrer" target="_blank">여기</a><br>초반에 구상한 기능은 모두 구현해 놨지만 아쉬운점이 많다.<br>삽질도 많이 했지만 그래서 더 의미있는 경험이었다.</p></blockquote>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/01/31/20200131-js-chrome-extension/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 14501 - 퇴사</title>
      <link>https://yhcho0405.github.io/2019/11/10/20191110-boj14501/</link>
      <guid>https://yhcho0405.github.io/2019/11/10/20191110-boj14501/</guid>
      <pubDate>Sun, 10 Nov 2019 14:31:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;왜 이리 어렵게 풀어놨을까&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		b[i] = i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		v = b[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; a[i] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			b[i+j] = b[i+j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		b[i+a[i]] = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; b[i] &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>왜 이리 어렵게 풀어놨을까</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">11</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">b[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v = b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i] + <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">b[i+j] = b[i+j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">b[i+a[i]] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/11/10/20191110-boj14501/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 11053 - 가장 긴 증가하는 부분 수열</title>
      <link>https://yhcho0405.github.io/2019/11/04/20191104-boj11053/</link>
      <guid>https://yhcho0405.github.io/2019/11/04/20191104-boj11053/</guid>
      <pubDate>Sun, 03 Nov 2019 20:04:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;이전의 &lt;a href=&quot;https://yhcho0405.github.io/2019/11/03/20191103-boj2352/&quot;&gt;반도체 설계&lt;/a&gt; 문제와 동일하다.&lt;br&gt;다른 점은 최대 길이 정도?&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, g, t, L[&lt;span class=&quot;number&quot;&gt;1001&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p = lower_bound(L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*p = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p == L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) g++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이전의 <a href="https://yhcho0405.github.io/2019/11/03/20191103-boj2352/">반도체 설계</a> 문제와 동일하다.<br>다른 점은 최대 길이 정도?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, g, t, L[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">auto</span> p = lower_bound(L+<span class="number">1</span>, L+g+<span class="number">1</span>, t);</span><br><span class="line">*p = t;</span><br><span class="line"><span class="keyword">if</span>(p == L+g+<span class="number">1</span>) g++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>마찬가지로 실제 최장증가수열을 구하진 못한다.</p><p>그저 길이만 출력한다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/11/04/20191104-boj11053/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2352 - 반도체 설계</title>
      <link>https://yhcho0405.github.io/2019/11/03/20191103-boj2352/</link>
      <guid>https://yhcho0405.github.io/2019/11/03/20191103-boj2352/</guid>
      <pubDate>Sun, 03 Nov 2019 08:01:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;뭔가 했는데 알고리즘 분류를 보니 LIS라고 한다.&lt;/p&gt;
&lt;p&gt;최장증가수열을 공부하고 풀었다.&lt;/p&gt;
&lt;p&gt;lower_bound로 최장증가수열을 구현하는 방식을 봤는데 실제로 유효한 수열을 구하진 않았다.&lt;/p&gt;
&lt;p&gt;그런데 이 문제는 수열을 구하는 게 아니라 수열의 길이만 구하면 되므로 최대한 생략하고 수열의 길이만 구하도록 바꿨다.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, g, t, L[&lt;span class=&quot;number&quot;&gt;40001&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p = lower_bound(L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*p = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p == L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) g++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>뭔가 했는데 알고리즘 분류를 보니 LIS라고 한다.</p><p>최장증가수열을 공부하고 풀었다.</p><p>lower_bound로 최장증가수열을 구현하는 방식을 봤는데 실제로 유효한 수열을 구하진 않았다.</p><p>그런데 이 문제는 수열을 구하는 게 아니라 수열의 길이만 구하면 되므로 최대한 생략하고 수열의 길이만 구하도록 바꿨다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, g, t, L[<span class="number">40001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">auto</span> p = lower_bound(L+<span class="number">1</span>, L+g+<span class="number">1</span>, t);</span><br><span class="line">*p = t;</span><br><span class="line"><span class="keyword">if</span>(p == L+g+<span class="number">1</span>) g++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/11/03/20191103-boj2352/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1080 - 행렬</title>
      <link>https://yhcho0405.github.io/2019/10/28/20191028-boj1080/</link>
      <guid>https://yhcho0405.github.io/2019/10/28/20191028-boj1080/</guid>
      <pubDate>Sun, 27 Oct 2019 19:03:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;어렵게 생각하면 절대 안 풀리더라.&lt;/p&gt;
&lt;p&gt;왼쪽 위부터 한자리씩 비교하며 다르면 그 칸을 포함해 오른쪽으로 3, 아래로 3 칸을 바꿔준다.&lt;/p&gt;
&lt;p&gt;전체가 같아지면 멈추고 모든 칸을 다 바꿨는데 다르면 -1출력.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>어렵게 생각하면 절대 안 풀리더라.</p><p>왼쪽 위부터 한자리씩 비교하며 다르면 그 칸을 포함해 오른쪽으로 3, 아래로 3 칸을 바꿔준다.</p><p>전체가 같아지면 멈추고 모든 칸을 다 바꿨는데 다르면 -1출력.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">51</span>][<span class="number">51</span>], b[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ii = i<span class="number">-1</span>; ii &lt;= i+<span class="number">1</span>; ii++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> jj = j<span class="number">-1</span>; jj &lt;= j+<span class="number">1</span>; jj++)</span><br><span class="line">            a[ii][jj] = <span class="string">'0'</span> + <span class="string">'1'</span> - a[ii][jj];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] != b[i][j])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, b[i]);       </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m<span class="number">-1</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i<span class="number">-1</span>][j<span class="number">-1</span>] != b[i<span class="number">-1</span>][j<span class="number">-1</span>]) &#123;</span><br><span class="line">                swap(i, j);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;              </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, com()? cnt : <span class="number">-1</span>);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a[i], b[i]로 받아도 개행이 인식되면 알아서 2차원 배열로 저장하는 듯</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/28/20191028-boj1080/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2529 - 부등호</title>
      <link>https://yhcho0405.github.io/2019/10/28/20191028-boj2529/</link>
      <guid>https://yhcho0405.github.io/2019/10/28/20191028-boj2529/</guid>
      <pubDate>Sun, 27 Oct 2019 18:54:00 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;가장-큰-수를-구할-때&quot;&gt;&lt;a href=&quot;#가장-큰-수를-구할-때&quot; class=&quot;headerlink&quot; title=&quot;가장 큰 수를 구할 때&quot;&gt;&lt;/a&gt;가장 큰 수를 구할 때&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;앞자리에 9를 넣고 시작한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;다음 부등호가 “&amp;lt;” 라면 부등호 다음 수를 9로 만들고 그전의 자리에는 -1을 해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“&amp;gt;” 라면 사용 안 했던 수 중에 가장 큰 수를 넣는다.&lt;br&gt;이런 방식으로 부등호 개수만큼 반복한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="가장-큰-수를-구할-때"><a href="#가장-큰-수를-구할-때" class="headerlink" title="가장 큰 수를 구할 때"></a>가장 큰 수를 구할 때</h2><hr><ol><li><p>앞자리에 9를 넣고 시작한다.</p></li><li><p>다음 부등호가 “&lt;” 라면 부등호 다음 수를 9로 만들고 그전의 자리에는 -1을 해준다.</p></li><li><p>“&gt;” 라면 사용 안 했던 수 중에 가장 큰 수를 넣는다.<br>이런 방식으로 부등호 개수만큼 반복한다.</p><a id="more"></a><br/></li></ol><h2 id="가장-작은-수를-구할-때"><a href="#가장-작은-수를-구할-때" class="headerlink" title="가장 작은 수를 구할 때"></a>가장 작은 수를 구할 때</h2><hr><ol><li><p>앞자리에 0을 넣고 시작한다.</p></li><li><p>다음 부등호가 “&gt;” 라면 부등호 다음 수를 0으로 만들고 그전의 자리에는 +1을 해준다.</p></li><li><p>“&lt;” 라면 사용 한했던 수 중에 가장 작은 수를 넣는다.</p></li><li><p>이런 방식으로 부등호 개수만큼 반복한다.</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">short a[<span class="number">10</span>];</span><br><span class="line">short p[<span class="number">10</span>] = &#123;<span class="number">0</span>, &#125;;</span><br><span class="line">short k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">short po = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">p[<span class="number">9</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] == <span class="string">'&lt;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = po; j &lt; i+<span class="number">1</span>; j++)</span><br><span class="line">p[--a[j]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b[i] == <span class="string">'&gt;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">po = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">9</span>; j &gt; <span class="number">-1</span>; j--)</span><br><span class="line"><span class="keyword">if</span>(p[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i + <span class="number">1</span>] = j;</span><br><span class="line">p[j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">short l[<span class="number">10</span>] = &#123;<span class="number">0</span>, &#125;;</span><br><span class="line">po = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">l[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] == <span class="string">'&gt;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = po; j &lt; i+<span class="number">1</span>; j++)</span><br><span class="line">l[++a[j]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b[i] == <span class="string">'&lt;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">po = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line"><span class="keyword">if</span>(l[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i + <span class="number">1</span>] = j;</span><br><span class="line">l[j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 문 굳이 2번 돌릴 필요 없이 함수로 짜면 깔끔할 듯하다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/28/20191028-boj2529/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1046 - 기타줄</title>
      <link>https://yhcho0405.github.io/2019/10/25/20191025-boj1046/</link>
      <guid>https://yhcho0405.github.io/2019/10/25/20191025-boj1046/</guid>
      <pubDate>Thu, 24 Oct 2019 21:34:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;딴 거 다 필요 없고 가장 싼 패키지와 낱개 가격만 있으면 된다.&lt;/p&gt;
&lt;p&gt;그걸 구하기 위해 나는 정렬을 사용한 모양이다. 굳이 그랬어야 할까.&lt;/p&gt;
&lt;p&gt;아무튼 경우의 수는 3가지다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;패키지로 살 수 있을 만큼 산 후 나머지 부족한 것을 낱개로 구입.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;전부 낱개로 구입.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;기타줄 몇 개 남더라도 싹 다 패키지로 구입.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3개 중 가장 작은 게 답이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>딴 거 다 필요 없고 가장 싼 패키지와 낱개 가격만 있으면 된다.</p><p>그걸 구하기 위해 나는 정렬을 사용한 모양이다. 굳이 그랬어야 할까.</p><p>아무튼 경우의 수는 3가지다.</p><ol><li><p>패키지로 살 수 있을 만큼 산 후 나머지 부족한 것을 낱개로 구입.</p></li><li><p>전부 낱개로 구입.</p></li><li><p>기타줄 몇 개 남더라도 싹 다 패키지로 구입.</p></li></ol><p>3개 중 가장 작은 게 답이다.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">short pa[<span class="number">50</span>], na[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pa[i] &gt;&gt; na[i];</span><br><span class="line">sort(pa, pa+m);</span><br><span class="line">sort(na, na+m);</span><br><span class="line"><span class="keyword">int</span> d1 = pa[<span class="number">0</span>] * (n / <span class="number">6</span>) + na[<span class="number">0</span>] * (n % <span class="number">6</span>);</span><br><span class="line"><span class="keyword">int</span> d2 = na[<span class="number">0</span>] * n;</span><br><span class="line"><span class="keyword">int</span> d3 = pa[<span class="number">0</span>] * ((n / <span class="number">6</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> v = min(min(d1, d2), d3);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정렬은 아무리 봐도 불편하다.<br>나중에 수정하자.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/25/20191025-boj1046/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1946 - 신입 사원</title>
      <link>https://yhcho0405.github.io/2019/10/25/20191025-boj1946/</link>
      <guid>https://yhcho0405.github.io/2019/10/25/20191025-boj1946/</guid>
      <pubDate>Thu, 24 Oct 2019 21:17:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;문제에 헷갈리는 문장이 있었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“다른 모든 지원자와 비교했을 때 서류심사 성적과 면접시험 성적 중 적어도 하나가 다른 지원자보다 떨어지지 않는 자만 선발한다는 원칙을 세웠다.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;???????????&lt;/p&gt;
&lt;p&gt;한참을 보다가 다음 줄 보고 이해했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“즉, 어떤 지원자 A의 성적이 다른 어떤 지원자 B의 성적에 비해 서류 심사 결과와 면접 성적이 모두 떨어진다면 A는 결코 선발되지 않는다.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ㅇㅎ&lt;/p&gt;
&lt;br/&gt;
이전에 회의실 배정인가 거기서 썼던 pair를 쓰면 편하겠단 생각이 들었다.

&lt;p&gt;first는 어차피 오름차순으로 정렬되니 다음 사람의 점수보다 무조건 낮을 것이고 그 와중에 second까지 작으면 조건에 의해 걔는 탈락이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>문제에 헷갈리는 문장이 있었다.</p><blockquote><p>“다른 모든 지원자와 비교했을 때 서류심사 성적과 면접시험 성적 중 적어도 하나가 다른 지원자보다 떨어지지 않는 자만 선발한다는 원칙을 세웠다.”</p></blockquote><p>???????????</p><p>한참을 보다가 다음 줄 보고 이해했다.</p><blockquote><p>“즉, 어떤 지원자 A의 성적이 다른 어떤 지원자 B의 성적에 비해 서류 심사 결과와 면접 성적이 모두 떨어진다면 A는 결코 선발되지 않는다.”</p></blockquote><p>ㅇㅎ</p><br/>이전에 회의실 배정인가 거기서 썼던 pair를 쓰면 편하겠단 생각이 들었다.<p>first는 어차피 오름차순으로 정렬되니 다음 사람의 점수보다 무조건 낮을 것이고 그 와중에 second까지 작으면 조건에 의해 걔는 탈락이다.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="keyword">int</span> tk[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p v[<span class="number">100001</span>];</span><br><span class="line">short t;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v[j].first &gt;&gt; v[j].second;</span><br><span class="line">&#125;</span><br><span class="line">sort(v, v+n);</span><br><span class="line"><span class="keyword">int</span> po = v[<span class="number">0</span>].second;</span><br><span class="line"><span class="keyword">int</span> p = n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(po &lt; v[j].second) p--;</span><br><span class="line"><span class="keyword">else</span> po = v[j].second;</span><br><span class="line">&#125;</span><br><span class="line">tk[i] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tk[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>왜 배열명을 tk로 썼는지 기억이 가물가물한데 아마 테스트 케이스를 줄여서 tk라 한듯하다.</p><p>근데 놀랍게도 test case를 굳이 줄인다면 tc이다.</p><p>졸았나보다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/25/20191025-boj1946/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1541 - 잃어버린 괄호</title>
      <link>https://yhcho0405.github.io/2019/10/25/20191025-boj1541/</link>
      <guid>https://yhcho0405.github.io/2019/10/25/20191025-boj1541/</guid>
      <pubDate>Thu, 24 Oct 2019 20:55:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;가장 작은 답이 나오려면 +끼리 괄호로 묶고 계산하면 된다. 라고 생각했지만 계속 반례가 생각나서 이건 아닐 거라고 판단했고 그냥 첫 번째 -가 나온 순간부터 다 빼버리면 처음 생각했던 것보다 단순하게 끝난다.&lt;/p&gt;
&lt;p&gt;+아스키코드 10은 line feed (다음 줄)&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; ch = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, &amp;amp;c), c != &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c == &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;) ch = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ch) a -= b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; a += b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>가장 작은 답이 나오려면 +끼리 괄호로 묶고 계산하면 된다. 라고 생각했지만 계속 반례가 생각나서 이건 아닐 거라고 판단했고 그냥 첫 번째 -가 나온 순간부터 다 빼버리면 처음 생각했던 것보다 단순하게 끝난다.</p><p>+아스키코드 10은 line feed (다음 줄)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ch = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c), c != <span class="number">10</span>;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'-'</span>) ch = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(ch) a -= b;</span><br><span class="line"><span class="keyword">else</span> a += b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>cin으로 받아보려 했으나 작동이 안 돼서 scanf로 받았다.</p><p>자료형을 정확히 명시해줘야 하는 것 같다.</p><p>추가로 for 문에 대해 새로 알게 된 점.</p><p>for(시작할 때 한 번만 실행; 조건문 말고도 scanf 같은 거 사용 가능, 한번 돌 때마다 조건문 확인해서 매번 실행되는 듯; 증감식, 여기도 매번 실행)</p><p>더 찾아봐야 알겠지만 이런 느낌인 듯.</p><p>​</p><p>이렇게도 될까?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ch = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a); <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c), c != <span class="number">10</span>;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'-'</span>) ch = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(ch) a -= b;</span><br><span class="line"><span class="keyword">else</span> a += b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>된다. 2바이트 줄였다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/25/20191025-boj1541/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1120 - 문자열</title>
      <link>https://yhcho0405.github.io/2019/10/24/20191024-boj1120/</link>
      <guid>https://yhcho0405.github.io/2019/10/24/20191024-boj1120/</guid>
      <pubDate>Thu, 24 Oct 2019 08:39:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;단순 그리디. B 안에서의 차이가 가장 적은 A를 구하면 그게 답이다.&lt;/p&gt;
&lt;p&gt;추가하는 연산은 무조건 차이가 가장 적게 할 테니까 신경 쓰지 않는다.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;], b[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; al = &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(a, &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; bl = &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(b, &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;51&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bl - al + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; co = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; al; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b[j+i] != a[j]) co++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(co &amp;lt; c) c = co;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;지금보면 좀 한심한 코드다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>단순 그리디. B 안에서의 차이가 가장 적은 A를 구하면 그게 답이다.</p><p>추가하는 연산은 무조건 차이가 가장 적게 할 테니까 신경 쓰지 않는다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">50</span>], b[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">int</span> al = <span class="built_in">sprintf</span>(a, <span class="string">"%s"</span>, a);</span><br><span class="line"><span class="keyword">int</span> bl = <span class="built_in">sprintf</span>(b, <span class="string">"%s"</span>, b);</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bl - al + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> co = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; al; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[j+i] != a[j]) co++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(co &lt; c) c = co;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>지금보면 좀 한심한 코드다.</p><a id="more"></a><p>배열 길이 구하겠다고 sprintf를 썼다.</p><p>시간나면 수정해서 다시 올리자.</p><br/>불편해서 바로 해버렸다.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size() - a.size() + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> co = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.size(); j++)</span><br><span class="line"><span class="keyword">if</span>(b[j+i] != a[j]) co++;</span><br><span class="line"><span class="keyword">if</span>(co &lt; c) c = co;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/24/20191024-boj1120/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2875 - 대회 or 인턴</title>
      <link>https://yhcho0405.github.io/2019/10/24/20191024-boj2875/</link>
      <guid>https://yhcho0405.github.io/2019/10/24/20191024-boj2875/</guid>
      <pubDate>Thu, 24 Oct 2019 08:26:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;엄청 간단한 문제였는데 방심했다가 틀렸다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;여자 수 / 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;남자 수&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;여자 수 + 남자 수 - 인턴 수&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3개 중에 가장 작은 값이 답이다. 가장 작은 값을 제외하곤 서로의 반례가 되기 때문.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, m, k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; min(min(n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, m), (n+m-k)/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>엄청 간단한 문제였는데 방심했다가 틀렸다.</p><ul><li><code>여자 수 / 2</code></li><li><code>남자 수</code></li><li><code>여자 수 + 남자 수 - 인턴 수</code></li></ul><p>3개 중에 가장 작은 값이 답이다. 가장 작은 값을 제외하곤 서로의 반례가 되기 때문.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(min(n/<span class="number">2</span>, m), (n+m-k)/<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/24/20191024-boj2875/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
