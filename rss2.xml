<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>yhcho0405</title>
    <link>https://yhcho0405.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>내가 보려고 쓰는 블로그</description>
    <pubDate>Tue, 24 Mar 2020 15:00:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>유클리드 호제법(Euclidean algorithm)</title>
      <link>https://yhcho0405.github.io/2020/03/24/20200324-etc-math1/</link>
      <guid>https://yhcho0405.github.io/2020/03/24/20200324-etc-math1/</guid>
      <pubDate>Tue, 24 Mar 2020 14:50:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;유클리드 호제법은 2개의 자연수 사이의 최대공약수를 구할 때 사용하는 알고리즘이다.&lt;br&gt;&lt;br&gt;&lt;br&gt;2개의 자연수 a, b(a &amp;gt; b)가 있고 a % b = r 이라고 한다면 a, b의 최대공약수는 a, r의 최대공약수와 같다. 이 성질을 이용해 b를 r로 나눈 나머지 r’을 구하고 다시 r을 r’으로 나눈 나머지를 구하는 과정을 반복해서 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수라고 한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>유클리드 호제법은 2개의 자연수 사이의 최대공약수를 구할 때 사용하는 알고리즘이다.<br><br><br>2개의 자연수 a, b(a &gt; b)가 있고 a % b = r 이라고 한다면 a, b의 최대공약수는 a, r의 최대공약수와 같다. 이 성질을 이용해 b를 r로 나눈 나머지 r’을 구하고 다시 r을 r’으로 나눈 나머지를 구하는 과정을 반복해서 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수라고 한다.</p><a id="more"></a><br><p>최대 공약수를 구하기 위해 a, b(a &gt; b)에 대하여 2부터 b까지 모든 수를 나누는 방법이 있겠으나 수가 커지면 시간이 오래걸린다.<br>하지만 유클리드 호제법은 mod연산을 통해 빠르게 수를 줄여나감으로 기존의 방법보다 효율적이다.</p><p>wikipedia의 예시를 보자.</p><p>79696과 19332의 최대공약수를 구하는 예시다.</p><blockquote><p>78696 ＝ 19332×4 ＋ 1368<br>19332 ＝ 1368×14 ＋ 180<br> 1368 ＝ 180×7 ＋ 108<br>    180 ＝ 108×1 ＋ 72<br>    108 ＝ 72×1 ＋ 36<br>     72 ＝ 36×2 ＋ 0<br>따라서, 최대공약수는 36이다.</p></blockquote><p>매우 간결하다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>재귀함수는 쓸모가 많다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/24/20200324-etc-math1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1110 - 더하기 사이클</title>
      <link>https://yhcho0405.github.io/2020/03/24/20200324-boj1110/</link>
      <guid>https://yhcho0405.github.io/2020/03/24/20200324-boj1110/</guid>
      <pubDate>Tue, 24 Mar 2020 14:12:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;읽히는 대로 짜면 된다.&lt;br&gt;신기한 점은 이 문제의 정답은 1, 3, 4, 12, 20, 60으로 6가지 밖에 없다.&lt;br&gt;0부터 99까지의 숫자 중에 정답이 1인 숫자가 1개, 3인 숫자가 3개 4인 숫자가 4개, 5인 숫자가 5개, 12인 숫자가 12개, 20인 숫자가 20개, 60인 숫자가 60개다.&lt;br&gt;각 정답이 같은 숫자끼리 돌아가며 등장한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>읽히는 대로 짜면 된다.<br>신기한 점은 이 문제의 정답은 1, 3, 4, 12, 20, 60으로 6가지 밖에 없다.<br>0부터 99까지의 숫자 중에 정답이 1인 숫자가 1개, 3인 숫자가 3개 4인 숫자가 4개, 5인 숫자가 5개, 12인 숫자가 12개, 20인 숫자가 20개, 60인 숫자가 60개다.<br>각 정답이 같은 숫자끼리 돌아가며 등장한다.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i = <span class="number">0</span> ,a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">c = n;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">a = c / <span class="number">10</span>;</span><br><span class="line">b = c % <span class="number">10</span>;</span><br><span class="line">c = (b * <span class="number">10</span>) + (a + b) % <span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span>(n != c);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1 + 3 + 4 + 12 + 20 + 60 = 100</p></blockquote>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/24/20200324-boj1110/#disqus_thread</comments>
    </item>
    
    <item>
      <title>에라토스테네스의 체 (+ 골드바흐의 추측)</title>
      <link>https://yhcho0405.github.io/2020/03/24/20200324-algorithm-theory11/</link>
      <guid>https://yhcho0405.github.io/2020/03/24/20200324-algorithm-theory11/</guid>
      <pubDate>Tue, 24 Mar 2020 12:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;자연수의 집합에서 소수를 찾아내는 방법으로 모든 수를 나눠보며 나머지를 확인하는 방법보다 빠르기 때문에 유용하게 사용된다.&lt;br&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif&quot; alt=&quot;에라토스테네스의 체&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>자연수의 집합에서 소수를 찾아내는 방법으로 모든 수를 나눠보며 나머지를 확인하는 방법보다 빠르기 때문에 유용하게 사용된다.<br><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="에라토스테네스의 체"></p><a id="more"></a><br><ol><li>소수를 구하고자 하는 구간의 모든 수를 나열한다.</li><li>2의 배수, 3의 배수, 5의 배수… 로 계속 지워나간다.<br>위의 움짤에선 숫자가 120까지 있으니 7의 배수 까지만 지워나가면 된다.(7의 다음 소수인 11의 제곱은 121이기 때문)</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> p[<span class="number">1000001</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= <span class="number">1000001</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i * i; j &lt; <span class="number">1000001</span>; j += i)</span><br><span class="line">p[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000001</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(!p[i]) prime.push_back(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>골드바흐의 추측은 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두개의 소수의 합으로 나타낼 수 있다는 추측이다.<br>1742년 부터 아직까지도 증명은 안 됐지만 작은 범위의 숫자 내에선 부분적으로 증명해볼 수 있다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ll, rr, l, r, sum, tmp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tmp</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">    sum = prime[l] + prime[r];</span><br><span class="line">    <span class="keyword">if</span>(sum == tmp) &#123;</span><br><span class="line">      ll = prime[l], rr = prime[r];</span><br><span class="line">      l++;</span><br><span class="line">      r--;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; tmp) &#123;</span><br><span class="line">      l++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>두개의 위치 인덱스를 조건이 맞을 때 까지 좁혀오며 답을 구하는 투 포인터 알고리즘을 사용하면 쉽다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/24/20200324-algorithm-theory11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>다익스트라 알고리즘(Dijkstra Algorithm)</title>
      <link>https://yhcho0405.github.io/2020/03/23/20200323-algorithm-theory10/</link>
      <guid>https://yhcho0405.github.io/2020/03/23/20200323-algorithm-theory10/</guid>
      <pubDate>Mon, 23 Mar 2020 08:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;다익스트라 알고리즘은 출발점으로부터 모든 정점까지의 최단 거리를 구하기 위해 사용한다.&lt;br&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/2/23/Dijkstras_progress_animation.gif&quot; alt=&quot;길찾기에 쓰인다.&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>다익스트라 알고리즘은 출발점으로부터 모든 정점까지의 최단 거리를 구하기 위해 사용한다.<br><img src="https://upload.wikimedia.org/wikipedia/commons/2/23/Dijkstras_progress_animation.gif" alt="길찾기에 쓰인다."></p><a id="more"></a><br><ol><li>모든 정점을 미방문 상태로 표시하고 시작점에 방문한다.</li><li>시작 정점을 제외하고 모든 정점까지의 거리를 무한대로 둔다.</li><li>현재 위치에서 갈 수 있는 모든 정점을 확인하고 해당 정점이 현재까지 기록한 거리보다 더 짧게 이동할 수 있다면 갱신한다.</li><li>아직 선택하지 않았던 정점 중 가장 짧은 거리의 정점을 현재 정점으로 선택한다.</li><li>3 ~ 4번 반복.</li></ol><p>코드는 직접 짜보고 나중에 추가</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/23/20200323-algorithm-theory10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>크루스칼 알고리즘(Kruskal Algorithm) (feat. Union-Find)</title>
      <link>https://yhcho0405.github.io/2020/03/23/20200323-algorithm-theory9/</link>
      <guid>https://yhcho0405.github.io/2020/03/23/20200323-algorithm-theory9/</guid>
      <pubDate>Mon, 23 Mar 2020 03:18:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;크루스칼 알고리즘은 가장 적은 비용으로 모든 노드를 연결하여 최소비용신장트리를 만들 때 사용하는 알고리즘이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>크루스칼 알고리즘은 가장 적은 비용으로 모든 노드를 연결하여 최소비용신장트리를 만들 때 사용하는 알고리즘이다.</p><a id="more"></a><br><p>가장 가중치가 작은 간선부터 골라가는 그리디한 방법이며 작동과정 중 사이클이 생기지 않도록 유니온파인드를 사용해 해결한다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Prim_Algorithm_0.svg/300px-Prim_Algorithm_0.svg.png" alt="wikipedia"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Kruskal_Algorithm_1.svg/300px-Kruskal_Algorithm_1.svg.png" alt="가중치가 가장 작은 간선을 선택한다."><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Kruskal_Algorithm_2.svg/300px-Kruskal_Algorithm_2.svg.png" alt="마찬가지로 가중치가 가장 작은 간선을 선택한다."><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Kruskal_Algorithm_3.svg/300px-Kruskal_Algorithm_3.svg.png" alt="그 다음으로 작은 간선을 선택한다."><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Kruskal_Algorithm_4.svg/300px-Kruskal_Algorithm_4.svg.png" alt="간선 AB를 선택하고 사이클이 발생하는 BD는 제외한다."><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/Kruskal_Algorithm_5.svg/300px-Kruskal_Algorithm_5.svg.png" alt="다음으로 작은 간선을 고르고 사이클이 발생하면 제외한다."><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Kruskal_Algorithm_6.svg/300px-Kruskal_Algorithm_6.svg.png" alt="반복하면 최소 비용 신장 부분 그래프가 완성된다."></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getParent</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">set</span>[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">set</span>[x] = getParent(<span class="built_in">set</span>, <span class="built_in">set</span>[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionParent</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">a = getParent(<span class="built_in">set</span>, a);</span><br><span class="line">b = getParent(<span class="built_in">set</span>, b);</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) <span class="built_in">set</span>[b] = a;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">set</span>[a] = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">a = getParent(<span class="built_in">set</span>, a);</span><br><span class="line">b = getParent(<span class="built_in">set</span>, b);</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> node[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> distance;</span><br><span class="line">Edge(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> distance) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;node[<span class="number">0</span>] = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;node[<span class="number">1</span>] = b;</span><br><span class="line"><span class="keyword">this</span>-&gt;distance = distance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(Edge &amp;edge) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;distance &lt; edge.distance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; v;</span><br><span class="line"></span><br><span class="line">v.push_back(Edge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">4</span>, <span class="number">5</span>, <span class="number">15</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>));</span><br><span class="line">v.push_back(Edge(<span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">set</span>[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!find(<span class="built_in">set</span>, v[i].node[<span class="number">0</span>] - <span class="number">1</span>, v[i].node[<span class="number">1</span>] - <span class="number">1</span>)) &#123;</span><br><span class="line">sum += v[i].distance;</span><br><span class="line">unionParent(<span class="built_in">set</span>, v[i].node[<span class="number">0</span>] - <span class="number">1</span>, v[i].node[<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 정점 A, B, C, D, E, F, E는 각 1, 2, 3, 4, 5, 6으로 표현했다.<br>최소 비용 신장 트리에서 간선들의 가중치 합을 출력하는 코드다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/23/20200323-algorithm-theory9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DFS(Depth First Search)와 BFS(Breath First Search)</title>
      <link>https://yhcho0405.github.io/2020/03/18/20200318-algorithm-theory8/</link>
      <guid>https://yhcho0405.github.io/2020/03/18/20200318-algorithm-theory8/</guid>
      <pubDate>Wed, 18 Mar 2020 09:00:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;깊이 우선 탐색(Depth First Search)&lt;ul&gt;
&lt;li&gt;루트 노드에서 시작해서 다음 분기(branch)로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법&lt;/li&gt;
&lt;li&gt;재귀함수를 기반으로 순환 알고리즘의 형태를 지님.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;너비 우선 탐색(Breath First Search)&lt;ul&gt;
&lt;li&gt;루트 노드에서 시작해서 인접한 노드를 먼저 탐색하는 방법&lt;/li&gt;
&lt;li&gt;재귀함수로 동작하지 않는다.&lt;/li&gt;
&lt;li&gt;큐를 사용하여 효율적으로 구현 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.hackerearth.com/wp-content/uploads/2015/05/dfsbfs_animation_final.gif&quot; alt=&quot;hackerearth&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>깊이 우선 탐색(Depth First Search)<ul><li>루트 노드에서 시작해서 다음 분기(branch)로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법</li><li>재귀함수를 기반으로 순환 알고리즘의 형태를 지님.<br></li></ul></li><li>너비 우선 탐색(Breath First Search)<ul><li>루트 노드에서 시작해서 인접한 노드를 먼저 탐색하는 방법</li><li>재귀함수로 동작하지 않는다.</li><li>큐를 사용하여 효율적으로 구현 가능하다.</li></ul></li></ul><p><img src="http://blog.hackerearth.com/wp-content/uploads/2015/05/dfsbfs_animation_final.gif" alt="hackerearth"></p><a id="more"></a><p>미로찾기에서도 사용된다.<br><a href="https://codepen.io/Owlree/details/PPomzo" target="_blank" rel="external nofollow noopener noreferrer">https://codepen.io/Owlree/details/PPomzo</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1001</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">v[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(v[i] == <span class="number">1</span> || ans[s][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">q.push(s);</span><br><span class="line">v[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">s = q.front();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ans[s][i] == <span class="number">0</span> || v[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">q.push(i);</span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">ans[a][b] = ans[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(s);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">bfs(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 1260번 내 채점 소스코드를 복붙해왔다.<br><a href="https://www.acmicpc.net/problem/1260" target="_blank" rel="external nofollow noopener noreferrer">https://www.acmicpc.net/problem/1260</a></p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/18/20200318-algorithm-theory8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]스택(Stack)과 큐(Queue)</title>
      <link>https://yhcho0405.github.io/2020/03/17/20200317-algorithm-theory7/</link>
      <guid>https://yhcho0405.github.io/2020/03/17/20200317-algorithm-theory7/</guid>
      <pubDate>Tue, 17 Mar 2020 04:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;스택과 큐는 선형구조로 분류되는 자료구조 중 대표적인 예시이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>스택과 큐는 선형구조로 분류되는 자료구조 중 대표적인 예시이다.</p><a id="more"></a><ul><li>스택(Stack)<ul><li>push(element) : top에 원소를 추가</li><li>pop() : top에 있는 원소를 삭제</li><li>top() : top에 있는 원소를 반환</li><li>empty() : 스택이 비어있으면 true 아니면 false를 반환</li><li>size() : 스택 사이즈를 반환<br>![wikipedia](https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/450px-Data_stack.svg.png)</li></ul></li></ul><br><ul><li>큐(Queue)<ul><li>push(element) : 큐 뒤에 원소를 추가</li><li>pop() : 큐 앞에 있는 원소를 삭제</li><li>front() : 큐 제일 앞에 있는 원소를 반환</li><li>back() : 큐 제일 뒤에 있는 원소를 반환</li><li>empty() : 큐가 비어있으면 true 아니면 false를 반환</li><li>size() : 큐 사이즈를 반환</li></ul></li></ul><br><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/450px-Data_Queue.svg.png" alt="wikipedia"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">s.push(<span class="number">1</span>);</span><br><span class="line">s.push(<span class="number">2</span>);</span><br><span class="line">s.push(<span class="number">3</span>);</span><br><span class="line">s.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (s.empty() ? <span class="string">"empty"</span> : <span class="string">"!empty"</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">q.push(<span class="number">2</span>);</span><br><span class="line">q.push(<span class="number">3</span>);</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (q.empty() ? <span class="string">"empty"</span> : <span class="string">"!empty"</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/17/20200317-algorithm-theory7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1202 - 보석 도둑</title>
      <link>https://yhcho0405.github.io/2020/03/16/20200316-boj1202/</link>
      <guid>https://yhcho0405.github.io/2020/03/16/20200316-boj1202/</guid>
      <pubDate>Mon, 16 Mar 2020 10:29:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;처음엔 무식하게 2중 for문으로 돌려보았다.&lt;br&gt;맞겠지 싶었는데 시간초과가 떴다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>처음엔 무식하게 2중 for문으로 돌려보았다.<br>맞겠지 싶었는데 시간초과가 떴다.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">p b[<span class="number">300001</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; a, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.first == b.first) <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line"><span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b[i].second &gt;&gt; b[i].first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(b, b + n, com);</span><br><span class="line">sort(c, c + k);</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(c[i] &gt;= b[j].second) &#123;</span><br><span class="line">total += b[j].first;</span><br><span class="line">b[j].second = INT_MAX;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시간초과가 떴기 때문에 논리가 맞고 틀리고는 모르지만 맞다고 생각하기로 했다.<br><br><br>생각해보니 n과 k가 300,000이라 가정했을 때 최악의 경우 2중 for문에서 300,000^2 번 연산하므로 제한시간 1초는 터무니없었다.<br><br><br>구글링해보니 우선순위 큐를 사용하더라<br>우선순위 큐를 얕게 핥아봤다.<br><br><br>우선순위 큐는 비선형자료구조로써 넣은 순서와 상관없이 우선순위대로 나간다.<br><br><br>max heap의 형태로 원소들이 저장되어 있다고 한다.<br>굉장한 우연으로 이거 풀기 전에 힙 정렬을 공부하고 왔다.</p><p>위 코드를 변형해서 우선순위 큐가지고 짜봤다.</p><ol><li>보석과 가방을 무게기준으로 오름차순 정렬한다.</li><li>가방 무게가 작은 것부터 for문을 돌며 그 가방에 들어갈 수 있는 보석을 우선순위 큐에 넣는다.</li><li>가장 큰 요소를 큐어서 빼서 total에 더한다.</li><li>반복한다.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; pq;</span><br><span class="line">p b[<span class="number">300001</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b[i].first &gt;&gt; b[i].second;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">sort(b, b + n);</span><br><span class="line">sort(c, c + k);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n &amp;&amp; b[j].first &lt;= c[i])</span><br><span class="line">pq.push(b[j++].second);</span><br><span class="line"><span class="keyword">if</span>(!pq.empty()) &#123;</span><br><span class="line">total += pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>맞았다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/16/20200316-boj1202/#disqus_thread</comments>
    </item>
    
    <item>
      <title>힙 정렬(Heap Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/16/20200316-algorithm-theory6/</link>
      <guid>https://yhcho0405.github.io/2020/03/16/20200316-algorithm-theory6/</guid>
      <pubDate>Mon, 16 Mar 2020 04:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;최대 힙 트리나 최소 힙 트리를 구현해 정렬하는 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
&lt;p&gt;트리 구조로 보여주는 움짤을 찾아보려 했으나 귀찮았다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>최대 힙 트리나 최소 힙 트리를 구현해 정렬하는 방법이다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif" alt="wikipedia"></p><p>트리 구조로 보여주는 움짤을 찾아보려 했으나 귀찮았다.</p><a id="more"></a><p>n개의 노드에 대해 완전 이진 트리를 구성한다.<br>heapify과정을 통해 부모노드의 요소가 자식노드의 요소보다 크도록 만든다.<br>가장 첫번째 요소와 가장 마지막 요소를 swap후 다시 heapify한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> heap[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> c = i;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">int</span> root = (c - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(heap[root] &lt; heap[c]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = heap[root];</span><br><span class="line">heap[root] = heap[c];</span><br><span class="line">heap[c] = temp;</span><br><span class="line">&#125;</span><br><span class="line">c = root;</span><br><span class="line">&#125; <span class="keyword">while</span>(c != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = heap[<span class="number">0</span>];</span><br><span class="line">heap[<span class="number">0</span>] = heap[i];</span><br><span class="line">heap[i] = temp;</span><br><span class="line"><span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">c = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(heap[c] &lt; heap[c + <span class="number">1</span>] &amp;&amp; c &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(heap[root] &lt; heap[c] &amp;&amp; c &lt; i) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = heap[root];</span><br><span class="line">heap[root] = heap[c];</span><br><span class="line">heap[c] = temp;</span><br><span class="line">&#125;</span><br><span class="line">root = c;</span><br><span class="line">&#125; <span class="keyword">while</span>(c &lt; i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; heap[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 최대 힙 트리를 통해 정렬한다.</p><blockquote><p>최대 힙 트리는 부모노드의 요소가 자식노드의 요소보다 크다.</p></blockquote><br><p>추가적인 메모리를 필요로 하지 않으면서 모든 경우에 대해 O(NlogN)의 시간복잡도를 보장받는다.<br>만능처럼 보이지만 실제로는 퀵소트가 더 빠르고 데이터의 상태에 따른 편차가 발생한다. 또 stable을 보장받지 못한다.</p><blockquote><p>heapify과정은 트리의 깊이 만큼 진행되므로 logN 만큼 수행하고 swap하는 과정을 n번 하면 정렬되므로 O(NlogN)의 시간복잡도가 나온다.</p></blockquote><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">heap</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/16/20200316-algorithm-theory6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>병합 정렬(Merge Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/15/20200315-algorithm-theory5/</link>
      <guid>https://yhcho0405.github.io/2020/03/15/20200315-algorithm-theory5/</guid>
      <pubDate>Sun, 15 Mar 2020 10:53:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;퀵소트와 마찬가지로 분할정복 알고리즘이다.&lt;br&gt;재귀함수를 이용해 배열을 절반으로 잘라가며 분할하고 정복한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>퀵소트와 마찬가지로 분할정복 알고리즘이다.<br>재귀함수를 이용해 배열을 절반으로 잘라가며 분할하고 정복한다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif" alt="wikipedia"></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m, <span class="keyword">int</span> mid, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = m;</span><br><span class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = m;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt;= a[j]) &#123;</span><br><span class="line">arr[k] = a[i];</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr[k] = a[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &gt; mid) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = j; t &lt;= n; t++) &#123;</span><br><span class="line">arr[k] = a[t];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = i; t &lt;= mid; t++) &#123;</span><br><span class="line">arr[k] = a[t];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = m; t &lt;= n; t++) &#123;</span><br><span class="line">a[t] = arr[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m &lt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (m + n) / <span class="number">2</span>;</span><br><span class="line">mergeSort(a, m, mid);</span><br><span class="line">mergeSort(a, mid + <span class="number">1</span>, n);</span><br><span class="line">merge(a, m, mid, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line">mergeSort(<span class="built_in">array</span>, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 mergeSort()함수는 재귀함수로써 배열을 절반으로 나눠가며 merge()함수를 호출하고, merge()함수에서는 요소들을 비교하며 정렬하는 정복 과정을 수행한다.</p><blockquote><p>mergeSort()는 분할, merge()는 정복의 역할을 한다.</p></blockquote><br><p>피봇에 따라 성능이 다른 퀵소트와 다르게 무조건 절반으로 분할하기 때문에 모든 경우에서 O(NlogN)의 시간복잡도를 보장받는다.<br>다만 데이터를 담을 추가적인 공간이 필요하기 때문에 메모리 측면에서 비효율적이다.</p><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">merge</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(NlogN)</td><td align="center">O(n)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/15/20200315-algorithm-theory5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>퀵 정렬(Quick Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/14/20200314-algorithm-theory4/</link>
      <guid>https://yhcho0405.github.io/2020/03/14/20200314-algorithm-theory4/</guid>
      <pubDate>Sat, 14 Mar 2020 03:22:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;분할 정복 알고리즘의 대표적인 예시이며 피봇을 기준으로 정렬해 나가는 정렬 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>분할 정복 알고리즘의 대표적인 예시이며 피봇을 기준으로 정렬해 나가는 정렬 방법이다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif" alt="wikipedia"></p><a id="more"></a><p>분할과정과 정복과정으로 나누어져 있으며, 피봇을 정한 뒤 피봇을 기준으로 작거나 큰것으로 나눠간다.<br>퀵소트의 피봇 선정 방식은 여러가지가 존재한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &gt;= end) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> key = start;</span><br><span class="line"><span class="keyword">int</span> i = start + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = end;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line"><span class="keyword">while</span>(arr[i] &lt;= arr[key]) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt;= arr[key] &amp;&amp; j &gt; start) &#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &gt; j) &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[key];</span><br><span class="line">arr[key] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">arr[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">quickSort(arr, start, j - <span class="number">1</span>);</span><br><span class="line">quickSort(arr, j + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">quickSort(arr, <span class="number">0</span>, num - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드는 피봇을 왼쪽의 요소로 잡는 알고리즘이다.<br><br><br>퀵소트는 이름에서 알 수 있드시 매우 빠른 정렬 알고리즘에 속한다.<br>하지만 최악의 경우 n^2으로 작동할 여지가 있다.<br>아이러니하게도 최악의 경우는 배열이 이미 정렬 되어있을 때 발생한다.<br><br><br>이 문제를 해결하기 위해 피봇을 랜덤으로 선정하거나 중위법을 이용하는 방법, 작은 분할 범위의 정렬은 삽입정렬을 이용하는 방법등이 있다.</p><blockquote><p>여담으로 C++ STL #include &lt;algorithm&gt; 라이브러리의 sort() 함수는 퀵소트를 기반으로 작성되었다.<br>(모든 경우에서 O(n log n)을 보장한다.)</p></blockquote><br><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">quick</td><td align="center">O(NlogN)</td><td align="center">O(N^2)</td><td align="center">O(NlogN)</td><td align="center">O(logN)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/14/20200314-algorithm-theory4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>삽입 정렬(Insertion Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory3/</link>
      <guid>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory3/</guid>
      <pubDate>Mon, 09 Mar 2020 05:24:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;배열의 모든 요소를 앞에서부터 이미 정렬된 배열과 비교하여 적절한 위치를 찾는 정렬 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.geeksforgeeks.org/wp-content/uploads/insertionsort.png&quot; alt=&quot;geeksforgeeks&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>배열의 모든 요소를 앞에서부터 이미 정렬된 배열과 비교하여 적절한 위치를 찾는 정렬 방법이다.</p><p><img src="https://media.geeksforgeeks.org/wp-content/uploads/insertionsort.png" alt="geeksforgeeks"></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp, arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>최악의 경우<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6fd040d16ddcc273c6928e0e06485727f2c3c2cf" alt="wikipedia"><br>번의 비교를 하게 되므로, O(n^2) 가 된다.<br><br><br>역시나 선택정렬이나 버블정렬과 같은 시간복잡도를 가지지만 실제론 삽입정렬이 가장 빠르다.<br>필요할 때만 위치를 바꾸기 때문에 거의 정렬이 된 상태일 때 가장 빠르고, 자원을 덜 사용하여 효율적으로 작동한다.<br>때문에 다른 정렬 알고리즘의 일부로 사용되는 경우가 있다.<br><br></p><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">insert</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(N)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>버블 정렬(Bubble Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory2/</link>
      <guid>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory2/</guid>
      <pubDate>Mon, 09 Mar 2020 01:10:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;인접한 두 원소를 비교하며 정렬하는 방법이다.&lt;br&gt;학기 초에 자주 접해서 익숙하다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif&quot; alt=&quot;wikipedia&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 움짤은 마약같다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>인접한 두 원소를 비교하며 정렬하는 방법이다.<br>학기 초에 자주 접해서 익숙하다.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif" alt="wikipedia"></p><p>위 움짤은 마약같다.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp, arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시간 복잡도는 선택정렬과 동일하다.<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/022f41f8c29a0da175bc0d4f84c53a8046e6cb8f" alt="wikipedia"><br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5042a309a9d1de0d8c89443c1950dd1e28a802e3" alt="wikipedia"><br>O(n^2) 가 된다.<br><br><br>하지만 선택 정렬보다 느리게 작동한다.<br>버블정렬은 매번 인접한 원소의 자리를 바꿔줘야 하지만 선택정렬은 배열에서 가장 작은 원소의 자리만 바꿔주면 되기 때문에 연산하는 양에서 차이가 발생한다.</p><br><p>위 코드에 실행 중 스왑이 안 발생할 시 break 해주면 성능을 높일 수 있다.</p><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">bubble</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>선택 정렬(Selection Sort)</title>
      <link>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory1/</link>
      <guid>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory1/</guid>
      <pubDate>Mon, 09 Mar 2020 01:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;주어진 배열에서 가장 작은 숫자를 앞으로 옮겨가며 정렬하는 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/5ai2E.jpg&quot; alt=&quot;stackoverflow&quot;&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>주어진 배열에서 가장 작은 숫자를 앞으로 옮겨가며 정렬하는 방법이다.</p><p><img src="https://i.stack.imgur.com/5ai2E.jpg" alt="stackoverflow"></p><a id="more"></a><br><p>#include &lt;climits&gt; 는 자료형의 최대, 최소값이 정의된 헤더파일이다.  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> min, idx, tmp, arr[<span class="number">10</span>] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">min = INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(min &gt; arr[j]) &#123;</span><br><span class="line">min = arr[j];</span><br><span class="line">idx = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tmp = arr[i];</span><br><span class="line">arr[i] = arr[idx];</span><br><span class="line">arr[idx] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>흔히 ‘정렬’이라는 주제를 떠올렸을 때 가장 직관적으로 떠올릴 수 있는 방법 중 하나인 만큼 비 효율적이다.</p><p>알고리즘의 성능을 분석할 때 시간복잡도라는 척도를 사용한다고 한다.</p><p>n개의 수를 정렬한다면<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/022f41f8c29a0da175bc0d4f84c53a8046e6cb8f" alt="wikipedia"><br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5042a309a9d1de0d8c89443c1950dd1e28a802e3" alt="wikipedia"><br>위 식을 빅 오 표기법으로 나타내면 O(n^2) 가 된다.</p><br><table><thead><tr><th align="center">algorithm</th><th align="center">average</th><th align="center">worst</th><th align="center">best</th><th align="center">space</th></tr></thead><tbody><tr><td align="center">select</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(N^2)</td><td align="center">O(1)</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/09/20200309-algorithm-theory1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>밴드 동아리 스케줄러 만들기</title>
      <link>https://yhcho0405.github.io/2020/03/03/20200303-cpp-project-bandscheduler/</link>
      <guid>https://yhcho0405.github.io/2020/03/03/20200303-cpp-project-bandscheduler/</guid>
      <pubDate>Mon, 02 Mar 2020 18:10:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;내가 만들고 싶은건 아니고 부탁받았다.&lt;br&gt;내용은 아래와 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;팀은 월 화 수 목 금&lt;/li&gt;
&lt;li&gt;세션은 보컬 신디 베이스 기타 드럼&lt;/li&gt;
&lt;li&gt;각 팀마다 세션에 들어가는 인원이 최소 한 명 이상은 있어야 함&lt;/li&gt;
&lt;li&gt;팀의 특정 세션의 최소, 최대 인원수를 정하고 돌릴 수 있으면 좋겠음&lt;/li&gt;
&lt;li&gt;ex) 월요일팀 보컬 1~2 기타 1~3 베이스 2 신디 2~3 드럼 2&lt;/li&gt;
&lt;li&gt;이름, 가능한 세션(복수선택 가능), 가능한요일(복수선택 가능), 희망하는 최대 팀 개수를 입력&lt;/li&gt;
&lt;li&gt;팀을 짤 때 둘 이상의 세션에 한 사람만 들어가면 안됨&lt;/li&gt;
&lt;li&gt;ex) 보컬 A, 기타 A, 신디 B, 베이스 C, 드럼 D&lt;/li&gt;
&lt;li&gt;희망하는 최대 팀 개수가 2 이상인 사람을 팀에 그보다 적게 넣어도 팀이 짜진다면 굳이 더 넣을 필요 없음&lt;/li&gt;
&lt;li&gt;꼭 한 팀에 붙어야 되는 사람을 정할 수 있으면 좋겠음 (희망사항ㅎㅎ)&lt;/li&gt;
&lt;li&gt;ex) E랑 F는 꼭 같은 팀이어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>내가 만들고 싶은건 아니고 부탁받았다.<br>내용은 아래와 같다.</p><blockquote><ul><li>팀은 월 화 수 목 금</li><li>세션은 보컬 신디 베이스 기타 드럼</li><li>각 팀마다 세션에 들어가는 인원이 최소 한 명 이상은 있어야 함</li><li>팀의 특정 세션의 최소, 최대 인원수를 정하고 돌릴 수 있으면 좋겠음</li><li>ex) 월요일팀 보컬 1~2 기타 1~3 베이스 2 신디 2~3 드럼 2</li><li>이름, 가능한 세션(복수선택 가능), 가능한요일(복수선택 가능), 희망하는 최대 팀 개수를 입력</li><li>팀을 짤 때 둘 이상의 세션에 한 사람만 들어가면 안됨</li><li>ex) 보컬 A, 기타 A, 신디 B, 베이스 C, 드럼 D</li><li>희망하는 최대 팀 개수가 2 이상인 사람을 팀에 그보다 적게 넣어도 팀이 짜진다면 굳이 더 넣을 필요 없음</li><li>꼭 한 팀에 붙어야 되는 사람을 정할 수 있으면 좋겠음 (희망사항ㅎㅎ)</li><li>ex) E랑 F는 꼭 같은 팀이어야 한다.</li></ul></blockquote><a id="more"></a><p>c++ 기반으로 작성할 예정이고 파일 입출력을 통해 동아리원들 정보를 받고 시간표를 출력한다.<br>자고 일어나서 만들자.</p><br>일어났다.동아리원이 30명 정도이기 때문에 최소의 경우로 인당 단 하루 한개의 세션을 선택해도 경우의 수는 아래와 같다.$$25^{30}$$계산기피셜 자릿수만 42자리다.모든 경우의 수를 다 대입해보는 것은 무리라고 생각했고 최적의 시간표를 만드는 방법을 찾아야 했다.<br><p>우선 개인별로 아래와 같은 하나의 시간표를 가진다.<br>예를 들어 A라는 사람은 화, 수, 목요일에 출석이 가능하고 기타와 베이스를 다룰줄 안다고 가정하자.</p><blockquote><p>보컬:V 기타:G 베이스:B 신디:S 드럼:D</p></blockquote><br><p><strong>A의 시간표</strong></p><hr><table><thead><tr><th align="left"></th><th align="center">월</th><th align="center">화</th><th align="center">수</th><th align="center">목</th><th align="center">금</th></tr></thead><tbody><tr><td align="left">V</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">G</td><td align="center"></td><td align="center">O</td><td align="center">O</td><td align="center">O</td><td align="center"></td></tr><tr><td align="left">B</td><td align="center"></td><td align="center">O</td><td align="center">O</td><td align="center">O</td><td align="center"></td></tr><tr><td align="left">S</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">D</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>개인별로 저런 형태의 시간표를 가지고 이를 3차원 배열로 저장한다.</p><p>다음으로 모든 시간표들로부터 각 칸의 빈도수를 저장할 2차원 배열을 만든다.</p><br><p><strong>빈도수</strong></p><hr><table><thead><tr><th align="left"></th><th align="center">월</th><th align="center">화</th><th align="center">수</th><th align="center">목</th><th align="center">금</th></tr></thead><tbody><tr><td align="left">V</td><td align="center">3</td><td align="center">2</td><td align="center">3</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="left">G</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="left">B</td><td align="center">3</td><td align="center">2</td><td align="center">3</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="left">S</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="left">D</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>숫자가 클 수록 상대적으로 널널한 시간대라고 볼 수 있다.</p><p>여기서 각 시간대별로 사용자가 미리 저장해둔 최소인원을 빼면 그 시간대에 움직임이 자유로운 가용인원 즉, 후에 가중치로 사용될 표가 생성된다.</p><br><p>시간대가 비어있어서 시간표 생성이 불가능하거나 최소인원보다 적게 인원이 집계된 경우와 같은 예외처리를 해준다.<br><br></p><p>모든 준비를 마치면 모든 사람의 시간표들을 체크하며 세로선당 가중치가 가장 작은 부분의 스케줄을 제외하고 모두 삭제한다.<br>이후 희망하는 최대 요일 수 만큼 남을 때 까지 가중치가 큰 순서대로 제외한다.</p><br>문제점을 발견했다.쓰기 귀찮아서 사진으로 대체한다.<p><img src="/image-in-post/20200304_bandscheduler.jpg" alt="notescan"></p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/03/03/20200303-cpp-project-bandscheduler/#disqus_thread</comments>
    </item>
    
    <item>
      <title>크롬 확장프로그램 개발 일지</title>
      <link>https://yhcho0405.github.io/2020/01/31/20200131-js-chrome-extension/</link>
      <guid>https://yhcho0405.github.io/2020/01/31/20200131-js-chrome-extension/</guid>
      <pubDate>Fri, 31 Jan 2020 13:13:01 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;크롬 확장 프로그램에 갑자기 꽂혀서 방학 때 낭비되는 시간도 아깝고 공부도 할겸 시작했다.&lt;br&gt;웹과 자바스크립트에 대해 무지한 상태에서 시작한 터라 시행착오를 많이 겪었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2019년-12월-23일-노베이스-개발-시작&quot;&gt;&lt;a href=&quot;#2019년-12월-23일-노베이스-개발-시작&quot; class=&quot;headerlink&quot; title=&quot;2019년 12월 23일 노베이스 개발 시작&quot;&gt;&lt;/a&gt;2019년 12월 23일 노베이스 개발 시작&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;크롬 익스텐션으로 주제 설정.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;구글링해가며 구동방식 이해.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;개발할 기능 구상.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;유튜브 동영상 시청 시, 시청중인 위치를 영상 제목과 함께 북마크해 모아주는 기능 구상.(onetab에서 아이디어 얻음)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;현재 시청중인 분, 초를 가져올 방법을 생각해야 함.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;html body태그에서 모든 단어들을 가져오기 =&amp;gt; 띄어쓰기로 스플릿 해서 구분 =&amp;gt; 줄바꿈으로 스플릿해서 분, 초 가 담긴 인덱스로 화면에 출력까지 성공.(아마 더 쉽게하는 방법이 있을 것)&lt;/p&gt;
&lt;p&gt;문제점&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html로 현재 재생중인 부분을 가져오다 보니 영상 시청 중 아래 타임라인이 사라지면 사라지기 직전의 시간을 가져온다는 점.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;추가 할 기능&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;여러개의 북마크를 어떻게 보여줄지.&lt;/li&gt;
&lt;li&gt;북마크된 링크로 넘어가는 방식은 어떻게 할지(링크누르기?, 버튼누르기?)
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>크롬 확장 프로그램에 갑자기 꽂혀서 방학 때 낭비되는 시간도 아깝고 공부도 할겸 시작했다.<br>웹과 자바스크립트에 대해 무지한 상태에서 시작한 터라 시행착오를 많이 겪었다.</p></blockquote><h2 id="2019년-12월-23일-노베이스-개발-시작"><a href="#2019년-12월-23일-노베이스-개발-시작" class="headerlink" title="2019년 12월 23일 노베이스 개발 시작"></a>2019년 12월 23일 노베이스 개발 시작</h2><hr><ul><li><p>크롬 익스텐션으로 주제 설정.</p></li><li><p>구글링해가며 구동방식 이해.</p></li><li><p>개발할 기능 구상.</p></li><li><p>유튜브 동영상 시청 시, 시청중인 위치를 영상 제목과 함께 북마크해 모아주는 기능 구상.(onetab에서 아이디어 얻음)</p></li><li><p>현재 시청중인 분, 초를 가져올 방법을 생각해야 함.</p></li><li><p>html body태그에서 모든 단어들을 가져오기 =&gt; 띄어쓰기로 스플릿 해서 구분 =&gt; 줄바꿈으로 스플릿해서 분, 초 가 담긴 인덱스로 화면에 출력까지 성공.(아마 더 쉽게하는 방법이 있을 것)</p><p>문제점</p><ol><li>html로 현재 재생중인 부분을 가져오다 보니 영상 시청 중 아래 타임라인이 사라지면 사라지기 직전의 시간을 가져온다는 점.</li></ol><p>추가 할 기능</p><ol><li>여러개의 북마크를 어떻게 보여줄지.</li><li>북마크된 링크로 넘어가는 방식은 어떻게 할지(링크누르기?, 버튼누르기?)<a id="more"></a>아이디어</li><li>유튜브 링크 뒤에 시간을 붙이면 그 시간대로 영상이 재생된다.</li></ol></li></ul><h2 id="2019년-12월-24일"><a href="#2019년-12월-24일" class="headerlink" title="2019년 12월 24일"></a>2019년 12월 24일</h2><hr><ul><li><p>유튜브 게시자의 프로필사진을 불러와 보여주는 기능 구상.</p></li><li><p>추출해야할 jpg파일의 src값 img태그의 class이름까지는 구했는데 자바스크립트에서 이를 받아올 방법을 찾아야 함.</p></li><li><p>jquery를 이용해 보려 했으나 실패.</p></li><li><p>북마킹 버튼 디자인(오픈소스 활용)</p><p>문제점</p><ol><li>위에서 말했던 대로 jquery를 못 쓰고 js로만 해보려 했으나 안됨.</li><li>아직도 23일 문제점 1을 해결하지 못함.</li></ol><p>추가 할 기능</p><ol><li>북마크된 정보에 프로필사진과 채널 명, 제목 일부를 보여줄 레이아웃 구상.</li><li>크롬 내부저장소에 북마크 된 정보를 저장.</li></ol><p>아이디어</p><ol><li>채널 프로필 사진을 함께 보여주어 정보확인 부분에서의 명확성을 높힘.</li></ol></li></ul><h2 id="2019년-12월-25일"><a href="#2019년-12월-25일" class="headerlink" title="2019년 12월 25일"></a>2019년 12월 25일</h2><hr><ul><li>새로운 확장프로그램 아이디어 생겨서 병행하느라 별로 못함.</li></ul><h2 id="2019년-12월-26일"><a href="#2019년-12월-26일" class="headerlink" title="2019년 12월 26일"></a>2019년 12월 26일</h2><hr><ul><li><p>게시자의 프로필 사진을 가져오는 것 보단 썸네일을 가져오는게 가시성이 더 높을 것이라 판단.</p></li><li><p>썸네일을 html iframe으로 불러오는데 성공.</p></li><li><p>링크와 합쳐 화면에 띄우는 데 성공.</p></li><li><p>삭제버튼 추가.</p><p>문제점</p><ol><li>썸네일 위 아래로 검은색 여백이 생간다.</li><li>크기를 강제로 줄이면 아래쪽 썸네일이 잘리기 때문에 해결하지 못한다.</li></ol></li></ul><h2 id="2019년-12월-27일"><a href="#2019년-12월-27일" class="headerlink" title="2019년 12월 27일"></a>2019년 12월 27일</h2><hr><ul><li><p>전체적인 레이아웃 수정.</p></li><li><p>제목 가져와서 화면에 표시하기 성공.</p></li><li><p>제목 string으로 형변환 후 “ - YouTube” 삭제.</p></li><li><p>뒤늦은 오류 발견.(해결)</p><ul><li>타이틀을 가져올 때 알람의 수 만큼 제목 앞에 붙어서 출력되는 문제 수정.</li><li>현재 시간을 가져올 때 가끔 인덱스 참조 예외가 생기는 문제 수정. (추후 유튜브 UI가 업데이트 되면 다시 발생할 가능성이 있기 때문에 오류코드와 이메일 삽입)</li></ul><p>문제점</p><ol><li>디자인 수정 필요.</li><li>크롬 저장소 활용해야 함.</li><li>youtube에서만 작동하도록 예외처리가 안됨.</li><li>버튼이 사라지게 하는 방법 찾기.</li></ol><p>추가할 점</p><ol><li>버튼의 활용 및 레이아웃 구상.</li></ol></li></ul><h2 id="2019년-12월-28일"><a href="#2019년-12월-28일" class="headerlink" title="2019년 12월 28일"></a>2019년 12월 28일</h2><hr><ul><li><p>유튜브에서만 동작할 수 있도록 예외처리 함.</p></li><li><p>제목 자르기 부분의 오류 확인 및 수정.(알람에 9+가 떴을 경우 외 여러가지 상황에 유동적으로 반응하게끔)</p></li><li><p>유튜브 안에는 있지만 동영상을 시청하지 않는 상황에 대한 예외처리 완료.</p><p>문제점</p><ol><li>동영상이 끝났을 때 에러코드 출력함. 예외처리 필요.</li><li>크롬 익스텐션에선 html의 인라인 함수를 보안상의 이유로 막아놈.(인라인 onclick 사용 불가)</li><li>2번의 이유로 js파일 내부에서 버튼 클릭 이벤트를 만들었으나, html 파일의 형식으로 insertBefore메서드를 사용할 방법을 찾아야 함.</li></ol><p>아이디어</p><ol><li>북마크가 쌓이면서 스크롤이 내려간다면 북마크 버튼의 위치를 유동적으로 바꾸는 방법이 있으면 좋겠다.</li></ol></li></ul><h2 id="2019년-12월-29일"><a href="#2019년-12월-29일" class="headerlink" title="2019년 12월 29일"></a>2019년 12월 29일</h2><hr><ul><li><p>insertBefore 메소드를 사용하지 않고 append로 처리해 클릭하면 현재의 창이 스크랩 되도록 함.</p></li><li><p>크롬 스토리지 기능을 사용해 북마크를 자동으로 저장하고 가져오는 기능 추가.</p></li><li><p>delete all 버튼도 기능 부여.</p></li><li><p>스토리지 기능 사용하며 코드 구조 수정.</p></li><li><p>예외처리 때문에 유튜브 밖에서 기록 삭제가 안되는 오류 수정.</p></li><li><p>썸네일 가져오는 방식을 iframe에서 img로 바꿈.</p></li><li><p>썸네일 상하 여백 크롭.</p><p>문제점</p><ol><li>익스텐션에서 a태그를 사용할 수 없다.</li></ol><p>추가할 점</p><ol><li>썸네일과 제목 클릭 시 하이퍼링크.</li><li>레이아웃 수정.</li><li>알수 없는 크롬저장소 오류 원인 찾기.</li></ol><p>발견 된 오류</p><ol><li>정상 작동 하나, 가끔 삭제 후 다시 들어가보면 다시 생겨있거나 이전의 기록과 합쳐짐.</li></ol></li></ul><h2 id="2019년-12월-30일"><a href="#2019년-12월-30일" class="headerlink" title="2019년 12월 30일"></a>2019년 12월 30일</h2><hr><ul><li><p>디자인 레이아웃 수정.</p></li><li><p>하이퍼링크 기능 활성화.</p></li><li><p>썸네일 테두리 둥글게 처리.</p></li><li><p>제목 2줄이상 오버플로우는 hidden처리.</p></li><li><p>실시간 영상의 경우 인덱스 오류 발생.</p></li><li><p>인덱스 참조에러가 알림의 유, 무와 관련있다는 사실 파악.</p></li><li><p>29일 발생한 오류 1번을 해결함.</p></li><li><p>시간 가져오는 방식 갈아엎음.(27일 발생한 인덱스 참조 오류의 원인 자체를 없앰.)</p><p>문제점</p><ol><li>16개 밖에 저장하지 못함.(string이 담을 수 있는 최대용량을 넘은것은 터무니없고 크롬 스토리지도 5mb까지 지원하기 때문에 충분하다. 아마 구조체 형식으로 처리해야 할 듯 하다.)<ul><li>chrome.storage.sync는 용량제한 100kb가 걸려있다는 사실 알게됨.(local은 제한 없어서 그거 썼다)</li></ul></li></ol></li></ul><h2 id="2019년-12월-31일"><a href="#2019년-12월-31일" class="headerlink" title="2019년 12월 31일"></a>2019년 12월 31일</h2><hr><ul><li>개별 삭제 버튼 추가.</li></ul><h2 id="2020년-1월-1일"><a href="#2020년-1월-1일" class="headerlink" title="2020년 1월 1일"></a>2020년 1월 1일</h2><hr><ul><li>id값은 고유해야 함.</li><li>개별삭제기능 구현.</li><li>아직 오류있음.</li><li>오류해결</li><li>초반에 기획했던 기능은 모두 구현 완료.</li></ul><h2 id="2020년-1월-2일"><a href="#2020년-1월-2일" class="headerlink" title="2020년 1월 2일"></a>2020년 1월 2일</h2><hr><ul><li>처음 사용자에게 발생하는 undefined 오류에 안내말 삽입.</li><li>1차 디버깅, 오류는 위 사항 말고 발견되지 않음.</li></ul><h2 id="2020년-1월-31일"><a href="#2020년-1월-31일" class="headerlink" title="2020년 1월 31일"></a>2020년 1월 31일</h2><hr><ul><li>처음 사용자에게 발생하는 저장소 오류에 대한 예외처리 코드 추가.</li><li>크롬 웹 스토어에 등록 거부됨. 재등록 후 등록 심사중.</li></ul><br><blockquote><p>최종적으론 크롬 웹 스토어에 등록을 성공했으며 블로그 좌측 배너에 링크되어 있다. 혹은 <a href="https://chrome.google.com/webstore/detail/youtubookmark-bookmark-yo/fhbaihahknhibdhgddjnekoffmjbpikm" rel="external nofollow noopener noreferrer" target="_blank">여기</a><br>초반에 구상한 기능은 모두 구현해 놨지만 아쉬운점이 많다.<br>삽질도 많이 했지만 그래서 더 의미있는 경험이었다.</p></blockquote>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/01/31/20200131-js-chrome-extension/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 14501 - 퇴사</title>
      <link>https://yhcho0405.github.io/2019/11/10/20191110-boj14501/</link>
      <guid>https://yhcho0405.github.io/2019/11/10/20191110-boj14501/</guid>
      <pubDate>Sun, 10 Nov 2019 14:31:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;왜 이리 어렵게 풀어놨을까&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		b[i] = i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		v = b[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; a[i] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			b[i+j] = b[i+j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		b[i+a[i]] = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; b[i] &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>왜 이리 어렵게 풀어놨을까</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">11</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">b[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v = b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i] + <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">b[i+j] = b[i+j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">b[i+a[i]] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/11/10/20191110-boj14501/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 11053 - 가장 긴 증가하는 부분 수열</title>
      <link>https://yhcho0405.github.io/2019/11/04/20191104-boj11053/</link>
      <guid>https://yhcho0405.github.io/2019/11/04/20191104-boj11053/</guid>
      <pubDate>Sun, 03 Nov 2019 20:04:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;이전의 &lt;a href=&quot;https://yhcho0405.github.io/2019/11/03/20191103-boj2352/&quot;&gt;반도체 설계&lt;/a&gt; 문제와 동일하다.&lt;br&gt;다른 점은 최대 길이 정도?&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, g, t, L[&lt;span class=&quot;number&quot;&gt;1001&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p = lower_bound(L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*p = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p == L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) g++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이전의 <a href="https://yhcho0405.github.io/2019/11/03/20191103-boj2352/">반도체 설계</a> 문제와 동일하다.<br>다른 점은 최대 길이 정도?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, g, t, L[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">auto</span> p = lower_bound(L+<span class="number">1</span>, L+g+<span class="number">1</span>, t);</span><br><span class="line">*p = t;</span><br><span class="line"><span class="keyword">if</span>(p == L+g+<span class="number">1</span>) g++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>마찬가지로 실제 최장증가수열을 구하진 못한다.</p><p>그저 길이만 출력한다.</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/11/04/20191104-boj11053/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2352 - 반도체 설계</title>
      <link>https://yhcho0405.github.io/2019/11/03/20191103-boj2352/</link>
      <guid>https://yhcho0405.github.io/2019/11/03/20191103-boj2352/</guid>
      <pubDate>Sun, 03 Nov 2019 08:01:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;뭔가 했는데 알고리즘 분류를 보니 LIS라고 한다.&lt;/p&gt;
&lt;p&gt;최장증가수열을 공부하고 풀었다.&lt;/p&gt;
&lt;p&gt;lower_bound로 최장증가수열을 구현하는 방식을 봤는데 실제로 유효한 수열을 구하진 않았다.&lt;/p&gt;
&lt;p&gt;그런데 이 문제는 수열을 구하는 게 아니라 수열의 길이만 구하면 되므로 최대한 생략하고 수열의 길이만 구하도록 바꿨다.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, g, t, L[&lt;span class=&quot;number&quot;&gt;40001&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p = lower_bound(L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*p = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p == L+g+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) g++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>뭔가 했는데 알고리즘 분류를 보니 LIS라고 한다.</p><p>최장증가수열을 공부하고 풀었다.</p><p>lower_bound로 최장증가수열을 구현하는 방식을 봤는데 실제로 유효한 수열을 구하진 않았다.</p><p>그런데 이 문제는 수열을 구하는 게 아니라 수열의 길이만 구하면 되므로 최대한 생략하고 수열의 길이만 구하도록 바꿨다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, g, t, L[<span class="number">40001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">auto</span> p = lower_bound(L+<span class="number">1</span>, L+g+<span class="number">1</span>, t);</span><br><span class="line">*p = t;</span><br><span class="line"><span class="keyword">if</span>(p == L+g+<span class="number">1</span>) g++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; g;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/11/03/20191103-boj2352/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1080 - 행렬</title>
      <link>https://yhcho0405.github.io/2019/10/28/20191028-boj1080/</link>
      <guid>https://yhcho0405.github.io/2019/10/28/20191028-boj1080/</guid>
      <pubDate>Sun, 27 Oct 2019 19:03:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;어렵게 생각하면 절대 안 풀리더라.&lt;/p&gt;
&lt;p&gt;왼쪽 위부터 한자리씩 비교하며 다르면 그 칸을 포함해 오른쪽으로 3, 아래로 3 칸을 바꿔준다.&lt;/p&gt;
&lt;p&gt;전체가 같아지면 멈추고 모든 칸을 다 바꿨는데 다르면 -1출력.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>어렵게 생각하면 절대 안 풀리더라.</p><p>왼쪽 위부터 한자리씩 비교하며 다르면 그 칸을 포함해 오른쪽으로 3, 아래로 3 칸을 바꿔준다.</p><p>전체가 같아지면 멈추고 모든 칸을 다 바꿨는데 다르면 -1출력.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">51</span>][<span class="number">51</span>], b[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ii = i<span class="number">-1</span>; ii &lt;= i+<span class="number">1</span>; ii++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> jj = j<span class="number">-1</span>; jj &lt;= j+<span class="number">1</span>; jj++)</span><br><span class="line">            a[ii][jj] = <span class="string">'0'</span> + <span class="string">'1'</span> - a[ii][jj];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] != b[i][j])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, b[i]);       </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m<span class="number">-1</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i<span class="number">-1</span>][j<span class="number">-1</span>] != b[i<span class="number">-1</span>][j<span class="number">-1</span>]) &#123;</span><br><span class="line">                swap(i, j);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;              </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, com()? cnt : <span class="number">-1</span>);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a[i], b[i]로 받아도 개행이 인식되면 알아서 2차원 배열로 저장하는 듯</p>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2019/10/28/20191028-boj1080/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
