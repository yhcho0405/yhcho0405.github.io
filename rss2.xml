<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>yhcho0405</title>
    <link>https://yhcho0405.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>내가 보려고 쓰는 블로그</description>
    <pubDate>Fri, 12 Jun 2020 11:30:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[C++]BOJ N과 M (1 ~ 4) - 15649 ~ 15652</title>
      <link>https://yhcho0405.github.io/2020/06/12/20200612-boj15649%2015650%2015651%2015652/</link>
      <guid>https://yhcho0405.github.io/2020/06/12/20200612-boj15649%2015650%2015651%2015652/</guid>
      <pubDate>Fri, 12 Jun 2020 11:30:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;이 게시물에는 N과 M 시리즈 1부터 4번까지 4문제의 풀이가 들어있음.&lt;br&gt;BOJ 15649 15650 15651 15652&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;모든 조건부 조합의 경우를 출력해야 하는 완전탐색 문제다.&lt;br&gt;사전순 출력이므로 dfs로 쉽게 풀 수 있다.&lt;br&gt;또 &lt;code&gt;cout &amp;lt;&amp;lt; endl;&lt;/code&gt; 는 느리게 작동하므로 &lt;code&gt;cout &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;&lt;/code&gt; 를 사용해야 한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>이 게시물에는 N과 M 시리즈 1부터 4번까지 4문제의 풀이가 들어있음.<br>BOJ 15649 15650 15651 15652</p></blockquote><p>모든 조건부 조합의 경우를 출력해야 하는 완전탐색 문제다.<br>사전순 출력이므로 dfs로 쉽게 풀 수 있다.<br>또 <code>cout &lt;&lt; endl;</code> 는 느리게 작동하므로 <code>cout &lt;&lt; &quot;\n&quot;;</code> 를 사용해야 한다.</p><a id="more"></a><br><h3 id="BOJ-15649-N과-M-1"><a href="#BOJ-15649-N과-M-1" class="headerlink" title="BOJ 15649 - N과 M (1)"></a>BOJ 15649 - N과 M (1)</h3><p>chk[]를 사용해 dfs수행 도중 같은 레벨의 depth에서 동일한 수를 사용하지 않도록 한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">10</span>], chk[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c == m) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(!chk[i]) &#123;</span><br><span class="line">arr[c] = i;</span><br><span class="line">chk[i] = <span class="number">1</span>;</span><br><span class="line">dfs(c + <span class="number">1</span>);</span><br><span class="line">chk[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="BOJ-15650-N과-M-2"><a href="#BOJ-15650-N과-M-2" class="headerlink" title="BOJ 15650 - N과 M (2)"></a>BOJ 15650 - N과 M (2)</h3><p>1번 문제와 다르게 오름차순이라는 조건이 생겼으므로 이전 depth에 담긴 값보다 클 경우에만 수를 넣도록 한다.<br>이 조건이 1번 문제의 chk[] 역할을 내포하고 있으므로 chk[]는 필요없다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c == m) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(arr[c - <span class="number">1</span>] &lt; i) &#123;</span><br><span class="line">arr[c] = i;</span><br><span class="line">dfs(c + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="BOJ-15651-N과-M-3"><a href="#BOJ-15651-N과-M-3" class="headerlink" title="BOJ 15651 - N과 M (3)"></a>BOJ 15651 - N과 M (3)</h3><p>같은 수를 여러 번 골라도 되므로 조건없는 완전탐색이다.<br>위의 문제들에서 조건을 삭제하면 된다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c == m) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">arr[c] = i;</span><br><span class="line">dfs(c + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="BOJ-15652-N과-M-4"><a href="#BOJ-15652-N과-M-4" class="headerlink" title="BOJ 15652 - N과 M (4)"></a>BOJ 15652 - N과 M (4)</h3><p>말만 복잡하지 요약하자면 2번 문제에서 중복을 허용하는 오름차순일 뿐이다.<br><code>&lt;</code> 를 <code>&lt;=</code> 로 바꿔주면 된다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c == m) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(arr[c - <span class="number">1</span>] &lt;= i) &#123;</span><br><span class="line">arr[c] = i;</span><br><span class="line">dfs(c + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/06/12/20200612-boj15649%2015650%2015651%2015652/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2644 - 탈출</title>
      <link>https://yhcho0405.github.io/2020/06/05/20200605-boj3055/</link>
      <guid>https://yhcho0405.github.io/2020/06/05/20200605-boj3055/</guid>
      <pubDate>Fri, 05 Jun 2020 07:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;돌이 ‘X’라는 말을 못봐서 틀렸다. 이런거 못보고 지나쳐서 틀렸을때는 매우 화난다. 그리고 이런곳에서 틀릴거라곤 상상도 못하기 때문에 해결하는데 시간도 오래걸린다.&lt;/p&gt;
&lt;p&gt;아무튼 bfs다.&lt;br&gt;한칸씩 확장해나가기 위해 큐 사이즈를 기준으로 while을 번갈아가며 돌린다.&lt;br&gt;비버가 굴에 도착하면 확장시킨 횟수를 출력한다.&lt;br&gt;비버가 굴로 못들어가면 “선인장”을 출력한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>돌이 ‘X’라는 말을 못봐서 틀렸다. 이런거 못보고 지나쳐서 틀렸을때는 매우 화난다. 그리고 이런곳에서 틀릴거라곤 상상도 못하기 때문에 해결하는데 시간도 오래걸린다.</p><p>아무튼 bfs다.<br>한칸씩 확장해나가기 위해 큐 사이즈를 기준으로 while을 번갈아가며 돌린다.<br>비버가 굴에 도착하면 확장시킨 횟수를 출력한다.<br>비버가 굴로 못들어가면 “선인장”을 출력한다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r, c, cx, cy, xx, yy, gs, wss, dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ans;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; wx, wy, gx, gy;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;arr[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j] == <span class="string">'S'</span>) gx.push(j), gy.push(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(arr[i][j] == <span class="string">'*'</span>) wx.push(j), wy.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!gx.empty()) &#123;</span><br><span class="line">wss = wx.size(); gs = gx.size();</span><br><span class="line"><span class="keyword">while</span>(wss--) &#123;</span><br><span class="line">cx = wx.front(); wx.pop();</span><br><span class="line">cy = wy.front(); wy.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = cx + dx[i]; yy = cy + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= c || yy &gt;= r || xx &lt; <span class="number">0</span> || yy &lt; <span class="number">0</span> || arr[yy][xx] != <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">wx.push(xx), wy.push(yy); arr[yy][xx] = <span class="string">'*'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(gs--) &#123;</span><br><span class="line">cx = gx.front(); gx.pop();</span><br><span class="line">cy = gy.front(); gy.pop();</span><br><span class="line"><span class="keyword">if</span>(arr[cy][cx] == <span class="string">'D'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = cx + dx[i]; yy = cy + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= c || yy &gt;= r || xx &lt; <span class="number">0</span> || yy &lt; <span class="number">0</span> || arr[yy][xx] == <span class="string">'S'</span> || arr[yy][xx] == <span class="string">'*'</span> || arr[yy][xx] == <span class="string">'X'</span>) <span class="keyword">continue</span>;</span><br><span class="line">gx.push(xx), gy.push(yy);</span><br><span class="line"><span class="keyword">if</span>(arr[yy][xx] != <span class="string">'D'</span>) arr[yy][xx] = <span class="string">'S'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"KAKTUS"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/06/05/20200605-boj3055/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2644 - 촌수계산</title>
      <link>https://yhcho0405.github.io/2020/06/05/20200605-boj2644/</link>
      <guid>https://yhcho0405.github.io/2020/06/05/20200605-boj2644/</guid>
      <pubDate>Fri, 05 Jun 2020 07:10:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;말이 촌수계산이지 그냥 노드와 노드사이의 거리를 구하면 된다.&lt;br&gt;최소 길이를 구하면 되므로 시작노드를 기준으로 bfs돌리면 된다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>말이 촌수계산이지 그냥 노드와 노드사이의 거리를 구하면 된다.<br>최소 길이를 구하면 되므로 시작노드를 기준으로 bfs돌리면 된다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b, c, d, cq, arr[<span class="number">102</span>][<span class="number">102</span>], v[<span class="number">102</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c &gt;&gt; d;</span><br><span class="line">arr[c][d] = arr[d][c] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(a);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">cq = q.front(); q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(arr[cq][i] &amp;&amp; !v[i])</span><br><span class="line">q.push(i), v[i] = v[cq] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (v[b] ? v[b] : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/06/05/20200605-boj2644/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2206 - 벽 부수고 이동하기</title>
      <link>https://yhcho0405.github.io/2020/05/31/20200531-boj2206/</link>
      <guid>https://yhcho0405.github.io/2020/05/31/20200531-boj2206/</guid>
      <pubDate>Sun, 31 May 2020 06:25:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;bfs로 갈 수 있는 경로를 탐색하면서 벽을 만났을 때 벽을 부순적이 없다면 벽을 부수고 이동하고 벽을 부순적이 있다면 지나간다.&lt;br&gt;벽을 부순적이 있는가 여부를 담을 큐 하나를 추가로 만들어주고 x, y와 함께 담아서 매칭시킨다.&lt;br&gt;처음에는 방문처리를 위한 v배열을 2차원으로 구성했는데 오답으로 처리됐다.&lt;br&gt;이유를 생각해보니 같은 위치에 있더라도 벽을 부순적이 있는 경로를 지나쳤거나 부순적이 없는 경로를 지나쳤거나 두 가지 경우가 있기 때문에 몇가지 경우의 수가 누락된다.&lt;br&gt;따라서 같은 위치라도 부순적이 있을 때, 없을 때도 고려해서 방문처리를 해 주어야 한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>bfs로 갈 수 있는 경로를 탐색하면서 벽을 만났을 때 벽을 부순적이 없다면 벽을 부수고 이동하고 벽을 부순적이 있다면 지나간다.<br>벽을 부순적이 있는가 여부를 담을 큐 하나를 추가로 만들어주고 x, y와 함께 담아서 매칭시킨다.<br>처음에는 방문처리를 위한 v배열을 2차원으로 구성했는데 오답으로 처리됐다.<br>이유를 생각해보니 같은 위치에 있더라도 벽을 부순적이 있는 경로를 지나쳤거나 부순적이 없는 경로를 지나쳤거나 두 가지 경우가 있기 때문에 몇가지 경우의 수가 누락된다.<br>따라서 같은 위치라도 부순적이 있을 때, 없을 때도 고려해서 방문처리를 해 주어야 한다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, cx, cy, cd, xx, yy, arr[<span class="number">1002</span>][<span class="number">1002</span>], v[<span class="number">1002</span>][<span class="number">1002</span>][<span class="number">2</span>], dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, mn, mx;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx, qy, qd;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;arr[i][j]);</span><br><span class="line">qx.push(<span class="number">1</span>), qy.push(<span class="number">1</span>), qd.push(<span class="number">0</span>); v[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!qx.empty()) &#123;</span><br><span class="line">cx = qx.front(); qx.pop();</span><br><span class="line">cy = qy.front(); qy.pop();</span><br><span class="line">cd = qd.front(); qd.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = cx + dx[i]; yy = cy + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt; m || yy &gt; n || xx &lt; <span class="number">1</span> || yy &lt; <span class="number">1</span> || v[yy][xx][cd]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(arr[yy][xx]) &#123;</span><br><span class="line"><span class="keyword">if</span>(cd) <span class="keyword">continue</span>;</span><br><span class="line">v[yy][xx][<span class="number">1</span>] = v[cy][cx][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">qx.push(xx), qy.push(yy), qd.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">v[yy][xx][cd] = v[cy][cx][cd] + <span class="number">1</span>;</span><br><span class="line">qx.push(xx), qy.push(yy), qd.push(cd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mn = min(v[n][m][<span class="number">0</span>], v[n][m][<span class="number">1</span>]); mx = max(v[n][m][<span class="number">0</span>], v[n][m][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(mn) <span class="built_in">cout</span> &lt;&lt; mn;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mx) <span class="built_in">cout</span> &lt;&lt; mx;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/31/20200531-boj2206/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 13460 - 구슬 탈출 2</title>
      <link>https://yhcho0405.github.io/2020/05/31/20200531-boj13460/</link>
      <guid>https://yhcho0405.github.io/2020/05/31/20200531-boj13460/</guid>
      <pubDate>Sat, 30 May 2020 23:32:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;처음에 시도했던 방법은 bfs에서 각 4가지 방향으로 기울였을 때 도달하는 지점의 좌표를 리턴하는 함수를 구현해 사용하는 것이었는데, 이후에 &lt;strong&gt;빨간 구슬과 파란 구슬은 동시에 같은 칸에 있을 수 없다.&lt;/strong&gt; 라는 문구를 보고 한참동안 뇌정지가 왔다.&lt;br&gt;어찌보면 당연하다. 구슬은 물리적으로 겹쳐질 수 없다.&lt;br&gt;구슬이 겹쳐지지 않는 경우를 알기 위해서 가장 쉽게 생각할 수 있는 방법은 구슬의 이동거리를 측정하는 것이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>처음에 시도했던 방법은 bfs에서 각 4가지 방향으로 기울였을 때 도달하는 지점의 좌표를 리턴하는 함수를 구현해 사용하는 것이었는데, 이후에 <strong>빨간 구슬과 파란 구슬은 동시에 같은 칸에 있을 수 없다.</strong> 라는 문구를 보고 한참동안 뇌정지가 왔다.<br>어찌보면 당연하다. 구슬은 물리적으로 겹쳐질 수 없다.<br>구슬이 겹쳐지지 않는 경우를 알기 위해서 가장 쉽게 생각할 수 있는 방법은 구슬의 이동거리를 측정하는 것이다.</p><a id="more"></a><p>예를들어 #RB…….# 같은 간단한 구슬 탈출 장난감이 있다고 치자.<br>A를 빨간구슬과 파란구슬이 겹쳐진 신비롭고 놀라운 구슬이라고 가정하면, 위 상황에서 오른쪽으로 기울였을 때 #…….A# 가 된다.<br>이 때 R은 B보다 더 많은 거리를 이동했다. 이 말은 즉, “A는 B보다 왼쪽에 위치했었다” 라고 말할 수 있다.<br>따라서 A를 B로 바꾸고 R을 B왼쪽에 두면 #…….RB# 이런 형태가 돼서 겹쳐지지 않고 구슬을 이동시킬 수 있다.</p><p>그리고 bfs를 돌려서 각 방향으로 기울였을 때의 빨간구슬과 파란구슬의 위치를 탐색한다.<br>그리고 이전의 탐색 문제들과는 다르게 빨간 구슬이 한번 방문했던 위치라도 파란 구슬의 위치에 따라 결과가 달라지므로 방문처리를 위한 배열을 4차원 배열로 구성해 빨간구슬의 위치와 파란구슬의 위치를 동시에 체크해주어야 한다.</p><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, rx, ry, bx, by, crx, cry, cbx, cby, cqc, cnt1, cnt2, v[<span class="number">12</span>][<span class="number">12</span>][<span class="number">12</span>][<span class="number">12</span>], dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ans;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; x1, x2, y1, y2, qc;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;arr[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j] == <span class="string">'R'</span>) rx = j, ry = i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(arr[i][j] == <span class="string">'B'</span>) bx = j, by = i;</span><br><span class="line">&#125;</span><br><span class="line">x1.push(rx), x2.push(bx), y1.push(ry), y2.push(by), qc.push(<span class="number">0</span>);</span><br><span class="line">v[rx][ry][bx][by] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!x1.empty()) &#123;</span><br><span class="line">rx = x1.front(); x1.pop();</span><br><span class="line">ry = y1.front(); y1.pop();</span><br><span class="line">bx = x2.front(); x2.pop();</span><br><span class="line">by = y2.front(); y2.pop();</span><br><span class="line">cqc = qc.front(); qc.pop();</span><br><span class="line"><span class="keyword">if</span>(cqc &gt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr[ry][rx] == <span class="string">'O'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cqc;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">crx = rx; cry = ry; cbx = bx; cby = by; cnt1 = <span class="number">0</span>; cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(arr[cry + dy[i]][crx + dx[i]] != <span class="string">'#'</span> &amp;&amp; arr[cry][crx] != <span class="string">'O'</span>) &#123;</span><br><span class="line">crx += dx[i];</span><br><span class="line">cry += dy[i];</span><br><span class="line">cnt1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(arr[cby + dy[i]][cbx + dx[i]] != <span class="string">'#'</span> &amp;&amp; arr[cby][cbx] != <span class="string">'O'</span>) &#123;</span><br><span class="line">cbx += dx[i];</span><br><span class="line">cby += dy[i];</span><br><span class="line">cnt2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(crx == cbx &amp;&amp; cry == cby) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[cby][cbx] == <span class="string">'O'</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt1 &gt; cnt2) &#123;</span><br><span class="line">crx -= dx[i];</span><br><span class="line">cry -= dy[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cbx -= dx[i];</span><br><span class="line">cby -= dy[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(v[crx][cry][cbx][cby]) <span class="keyword">continue</span>;</span><br><span class="line">v[crx][cry][cbx][cby] = <span class="number">1</span>;</span><br><span class="line">x1.push(crx), x2.push(cbx), y1.push(cry), y2.push(cby), qc.push(cqc + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/31/20200531-boj13460/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 7562 - 나이트의 이동</title>
      <link>https://yhcho0405.github.io/2020/05/28/20200528-boj7562/</link>
      <guid>https://yhcho0405.github.io/2020/05/28/20200528-boj7562/</guid>
      <pubDate>Thu, 28 May 2020 14:42:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;나이트가 이동할 수 있는 자리를 bfs나 dfs로 탐색해나가다 도착점까지의 이동횟수를 출력하면 된다.&lt;br&gt;테스트케이스가 여러개라서 이 부분을 깔끔하게 처리해야한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>나이트가 이동할 수 있는 자리를 bfs나 dfs로 탐색해나가다 도착점까지의 이동횟수를 출력하면 된다.<br>테스트케이스가 여러개라서 이 부분을 깔끔하게 처리해야한다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>&#125;, dy[] = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> t, l, x1, y1, x2, y2, cx, cy, xx, yy, arr[<span class="number">302</span>][<span class="number">302</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx, qy;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">arr[y1][x1] = <span class="number">1</span>;</span><br><span class="line">qx.push(x1), qy.push(y1);</span><br><span class="line"><span class="keyword">while</span>(!qx.empty()) &#123;</span><br><span class="line">cx = qx.front(); qx.pop();</span><br><span class="line">cy = qy.front(); qy.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">xx = cx + dx[i]; yy = cy + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= l || yy &gt;= l || xx &lt; <span class="number">0</span> || yy &lt; <span class="number">0</span> || arr[yy][xx]) <span class="keyword">continue</span>;</span><br><span class="line">qx.push(xx), qy.push(yy);</span><br><span class="line">arr[yy][xx] = arr[cy][cx] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[y2][x2] - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/28/20200528-boj7562/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 10026 - 적록색약</title>
      <link>https://yhcho0405.github.io/2020/05/28/20200528-boj10026/</link>
      <guid>https://yhcho0405.github.io/2020/05/28/20200528-boj10026/</guid>
      <pubDate>Wed, 27 May 2020 15:01:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;문자열 입력인 문제가 오랜만이라 한번 틀렸다ㅠ&lt;br&gt;입력 받을 때 주의할 것.&lt;br&gt;무작정 두가지 경우를 다 돌려도 되지만 더 간단하게 짜봤다.&lt;br&gt;핵심은 적록색약이 아닌 사람을 탐색할 때 R을 B로 바꿔버리는 것이다.&lt;br&gt;그러면 적록색약인 사람을 탐색할 때 R은 전부 B로 바뀌어 조건에 맞게 탐색하게 된다.&lt;br&gt;dfs로 풀어봤다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>문자열 입력인 문제가 오랜만이라 한번 틀렸다ㅠ<br>입력 받을 때 주의할 것.<br>무작정 두가지 경우를 다 돌려도 되지만 더 간단하게 짜봤다.<br>핵심은 적록색약이 아닌 사람을 탐색할 때 R을 B로 바꿔버리는 것이다.<br>그러면 적록색약인 사람을 탐색할 때 R은 전부 B로 바뀌어 조건에 맞게 탐색하게 된다.<br>dfs로 풀어봤다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans1, ans2, c, xx, yy, dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">102</span>][<span class="number">102</span>], v[<span class="number">102</span>][<span class="number">102</span>], color[<span class="number">3</span>] = &#123;<span class="string">'R'</span>, <span class="string">'G'</span>, <span class="string">'B'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">v[y][x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(arr[y][x] == <span class="string">'R'</span>) arr[y][x] = <span class="string">'G'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = x + dx[i]; yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &lt; n &amp;&amp; yy &lt; n &amp;&amp; xx &gt;= <span class="number">0</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; arr[yy][xx] == color[c] &amp;&amp; !v[yy][xx]) dfs(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;arr[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">2</span>; t++) &#123; <span class="comment">// 0 = 적록색약이 아닌사람, 1 = 적록색약인 사람  </span></span><br><span class="line"><span class="keyword">for</span>(c = t; c &lt; <span class="number">3</span>; c++) <span class="comment">// color</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j] == color[c] &amp;&amp; !v[i][j]) &#123;</span><br><span class="line">dfs(j, i);</span><br><span class="line"><span class="keyword">if</span>(t) ans2++;</span><br><span class="line"><span class="keyword">else</span> ans1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="string">" "</span> &lt;&lt; ans2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/28/20200528-boj10026/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 7569 - 토마토</title>
      <link>https://yhcho0405.github.io/2020/05/27/20200527-boj7569/</link>
      <guid>https://yhcho0405.github.io/2020/05/27/20200527-boj7569/</guid>
      <pubDate>Wed, 27 May 2020 08:41:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;재밌는 문제다.&lt;br&gt;같은 이름의 문제가 두 개인데 이 문제 -&amp;gt; &lt;a href=&quot;/2020/05/20/20200520-boj7576/&quot;&gt;토마토&lt;/a&gt;는 2차원 공간에서의 탐색이라면 지금 이 문제는 3차원 공간에서의 탐색이다.&lt;br&gt;기본적인 풀이는 2차원 &lt;a href=&quot;/2020/05/20/20200520-boj7576/&quot;&gt;토마토&lt;/a&gt;와 같고 축 하나만 더 추가하면 된다.&lt;br&gt;bfs로 풀었다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>재밌는 문제다.<br>같은 이름의 문제가 두 개인데 이 문제 -&gt; <a href="/2020/05/20/20200520-boj7576/">토마토</a>는 2차원 공간에서의 탐색이라면 지금 이 문제는 3차원 공간에서의 탐색이다.<br>기본적인 풀이는 2차원 <a href="/2020/05/20/20200520-boj7576/">토마토</a>와 같고 축 하나만 더 추가하면 된다.<br>bfs로 풀었다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dz[<span class="number">6</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m, n, h, cx, cy, cz, xx, yy, zz, arr[<span class="number">102</span>][<span class="number">102</span>][<span class="number">102</span>], ans;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx, qy, qz;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">1</span>; z &lt;= h; z++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; y++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= m; x++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[z][y][x];</span><br><span class="line"><span class="keyword">if</span>(arr[z][y][x] == <span class="number">1</span>) qx.push(x), qy.push(y), qz.push(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!qx.empty()) &#123;</span><br><span class="line">cx = qx.front(); qx.pop();</span><br><span class="line">cy = qy.front(); qy.pop();</span><br><span class="line">cz = qz.front(); qz.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">xx = cx + dx[i]; yy = cy + dy[i]; zz = cz + dz[i];</span><br><span class="line"><span class="keyword">if</span>(xx &lt; <span class="number">1</span> || yy &lt; <span class="number">1</span> || zz &lt; <span class="number">1</span> || xx &gt; m || yy &gt; n || zz &gt; h || arr[zz][yy][xx]) <span class="keyword">continue</span>;</span><br><span class="line">qx.push(xx), qy.push(yy), qz.push(zz);</span><br><span class="line">arr[zz][yy][xx] = arr[cz][cy][cx] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">1</span>; z &lt;= h; z++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; y++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= m; x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!arr[z][y][x]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, arr[z][y][x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/27/20200527-boj7569/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2583 - 영역 구하기</title>
      <link>https://yhcho0405.github.io/2020/05/27/20200527-boj2583/</link>
      <guid>https://yhcho0405.github.io/2020/05/27/20200527-boj2583/</guid>
      <pubDate>Wed, 27 May 2020 08:27:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;주어진 좌표로 배열에 해당 영역을 채우고 빈 영역을 dfs나 bfs 돌리면 되는 단순한 탐색 문제다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>주어진 좌표로 배열에 해당 영역을 채우고 빈 영역을 dfs나 bfs 돌리면 되는 단순한 탐색 문제다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m, n, k, x1, x2, y1, y2, arr[<span class="number">102</span>][<span class="number">102</span>], xx, yy, dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, tmp, ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; area;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">arr[y][x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = x + dx[i]; yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= n || yy &gt;= m || xx &lt; <span class="number">0</span> || yy &lt; <span class="number">0</span> || arr[yy][xx]) <span class="keyword">continue</span>;</span><br><span class="line">tmp++;</span><br><span class="line">dfs(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = x1; x &lt; x2; x++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = y1; y &lt; y2; y++)</span><br><span class="line">arr[y][x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">if</span>(!arr[i][j]) &#123;</span><br><span class="line">tmp = <span class="number">1</span>;</span><br><span class="line">dfs(j, i);</span><br><span class="line">area.push_back(tmp);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(area.begin(), area.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; area.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; area[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/27/20200527-boj2583/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2468 - 안전 영역</title>
      <link>https://yhcho0405.github.io/2020/05/27/20200527-boj2468/</link>
      <guid>https://yhcho0405.github.io/2020/05/27/20200527-boj2468/</guid>
      <pubDate>Wed, 27 May 2020 08:20:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;범위가 그리 크지 않기 때문에 내리는 비의 양을 완전탐색하고 그때마다 높이를 기준으로 dfs나 bfs를 돌리면 된다.&lt;br&gt;이 문제는 dfs로 풀어봤다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>범위가 그리 크지 않기 때문에 내리는 비의 양을 완전탐색하고 그때마다 높이를 기준으로 dfs나 bfs를 돌리면 된다.<br>이 문제는 dfs로 풀어봤다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, h, arr[<span class="number">102</span>][<span class="number">102</span>], v[<span class="number">102</span>][<span class="number">102</span>], xx, yy, ans, tmp, dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">v[y][x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = x + dx[i]; yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt; n || yy &gt; n || xx &lt; <span class="number">1</span> || yy &lt; <span class="number">1</span> || arr[yy][xx] &lt;= h || v[yy][xx]) <span class="keyword">continue</span>;</span><br><span class="line">dfs(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line">m = max(m, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(h = <span class="number">0</span>; h &lt;= m; h++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v)); tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j] &gt; h &amp;&amp; !v[i][j]) &#123;</span><br><span class="line">dfs(j, i);</span><br><span class="line">tmp++;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/27/20200527-boj2468/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 6603 - 로또</title>
      <link>https://yhcho0405.github.io/2020/05/26/20200526-boj6603/</link>
      <guid>https://yhcho0405.github.io/2020/05/26/20200526-boj6603/</guid>
      <pubDate>Tue, 26 May 2020 09:06:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;주어진 집합에서 수 6개를 고르는 경우의 수를 완전탐색하는 문제다.&lt;br&gt;사전순 출력이기 때문에 dfs로 가지치기를 해 나가면 된다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>주어진 집합에서 수 6개를 고르는 경우의 수를 완전탐색하는 문제다.<br>사전순 출력이기 때문에 dfs로 가지치기를 해 나가면 된다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> k, arr[<span class="number">15</span>], ans[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt; k; i++) &#123;</span><br><span class="line">ans[c] = arr[i];</span><br><span class="line">dfs(i + <span class="number">1</span>, c + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; k &amp;&amp; k) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>구조 자체가 이해했더라도 갑자기 떠올리기 힘든 형태다ㅠ</p></blockquote>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/26/20200526-boj6603/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 11403 - 경로 찾기</title>
      <link>https://yhcho0405.github.io/2020/05/24/20200524-boj11403/</link>
      <guid>https://yhcho0405.github.io/2020/05/24/20200524-boj11403/</guid>
      <pubDate>Sun, 24 May 2020 14:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;방향성을 가지는 그래프를 탐색하는 것으로 dfs, bfs 모두 가능하다.&lt;br&gt;이 문제는 dfs로 풀어봤다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>방향성을 가지는 그래프를 탐색하는 것으로 dfs, bfs 모두 가능하다.<br>이 문제는 dfs로 풀어봤다.</p><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, arr[<span class="number">102</span>][<span class="number">102</span>], v[<span class="number">102</span>][<span class="number">102</span>], ans[<span class="number">102</span>][<span class="number">102</span>], cs;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!arr[s][i] || v[s][i]) <span class="keyword">continue</span>;</span><br><span class="line">v[s][i] = <span class="number">1</span>;</span><br><span class="line">ans[cs][i] = <span class="number">1</span>;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">cs = i;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/24/20200524-boj11403/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 11724 - 연결 요소의 개수</title>
      <link>https://yhcho0405.github.io/2020/05/24/20200524-boj11724/</link>
      <guid>https://yhcho0405.github.io/2020/05/24/20200524-boj11724/</guid>
      <pubDate>Sun, 24 May 2020 08:24:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;단순한 탐색 문제다.&lt;br&gt;모든 노드를 간선을 따라 탐색하며 방문처리를 한 후, 방문을 안한 노드가 있다면 모든 노드를 방문할 때 까지 탐색하고 총 탐색 횟수를 출력하면 된다.&lt;br&gt;dfs와 bfs모두 쓸 수 있다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>단순한 탐색 문제다.<br>모든 노드를 간선을 따라 탐색하며 방문처리를 한 후, 방문을 안한 노드가 있다면 모든 노드를 방문할 때 까지 탐색하고 총 탐색 횟수를 출력하면 된다.<br>dfs와 bfs모두 쓸 수 있다.</p><a id="more"></a><br>bfs로 이 문제 풀다가 시간초과가 났는데 얼타다가 생각해보니 방문처리를 큐에서 뺀 후가 아니라 넣은 후에 해줘야 했다는걸 간과했다.기억할것<br><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">1002</span>][<span class="number">1002</span>], vs[<span class="number">1002</span>], u, v, tmp, ans;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">q.push(s);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">s = q.front(); q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!arr[s][i] || vs[i]) <span class="keyword">continue</span>;</span><br><span class="line">q.push(i);</span><br><span class="line">vs[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">arr[u][v] = arr[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(!vs[i]) &#123;</span><br><span class="line">bfs(i);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">1002</span>][<span class="number">1002</span>], vs[<span class="number">1002</span>], u, v, tmp, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">vs[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(vs[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(arr[s][i]) dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">arr[u][v] = arr[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(!vs[i]) &#123;</span><br><span class="line">dfs(i);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/24/20200524-boj11724/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 14502 - 연구소</title>
      <link>https://yhcho0405.github.io/2020/05/24/20200524-boj14502/</link>
      <guid>https://yhcho0405.github.io/2020/05/24/20200524-boj14502/</guid>
      <pubDate>Sun, 24 May 2020 07:24:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;주어진 지도의 크기가 최대 &lt;code&gt;8 * 8&lt;/code&gt;이므로 바이러스와 벽이 아무것도 없다고 가정하면 벽을 세울 수 있는 경우의 수는 &lt;code&gt;64C3&lt;/code&gt; 대략, &lt;code&gt;40,000&lt;/code&gt; 가지이다.&lt;br&gt;그러므로 벽을 세우는 문제는 완전탐색으로 해결할 수 있다.&lt;br&gt;벽을 세우는 모든 방법의 수 마다 바이러스가 퍼지는 경우를 dfs로 탐색하고 안전영역이 가장 큰 경우의 수를 기억해 마지막에 &lt;code&gt;전체 칸의 갯수 - 퍼진 바이러스의 갯수 - 처음에 있던 벽의 갯수 - 3&lt;/code&gt;을 출력한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bfs로도 풀 수 있다. 귀찮아서 안 해봤다.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>주어진 지도의 크기가 최대 <code>8 * 8</code>이므로 바이러스와 벽이 아무것도 없다고 가정하면 벽을 세울 수 있는 경우의 수는 <code>64C3</code> 대략, <code>40,000</code> 가지이다.<br>그러므로 벽을 세우는 문제는 완전탐색으로 해결할 수 있다.<br>벽을 세우는 모든 방법의 수 마다 바이러스가 퍼지는 경우를 dfs로 탐색하고 안전영역이 가장 큰 경우의 수를 기억해 마지막에 <code>전체 칸의 갯수 - 퍼진 바이러스의 갯수 - 처음에 있던 벽의 갯수 - 3</code>을 출력한다.</p><blockquote><p>bfs로도 풀 수 있다. 귀찮아서 안 해봤다.</p></blockquote><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">10</span>][<span class="number">10</span>], v[<span class="number">10</span>][<span class="number">10</span>], ay, ax, by, bx, cy, cx, tmp, dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, tx, ty, wal, vir = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">v[y][x] = <span class="number">1</span>; tmp++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">tx = x + dx[i]; ty = y + dy[i];</span><br><span class="line"><span class="keyword">if</span>(tx &gt; m || ty &gt; n || tx &lt; <span class="number">1</span> || ty &lt; <span class="number">1</span> || v[ty][tx] || arr[ty][tx]) <span class="keyword">continue</span>;</span><br><span class="line">dfs(tx, ty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v)); tmp = <span class="number">0</span>;</span><br><span class="line">arr[ay][ax] = <span class="number">1</span>; arr[by][bx] = <span class="number">1</span>; arr[cy][cx] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j] == <span class="number">2</span>) dfs(j, i);</span><br><span class="line">arr[ay][ax] = <span class="number">0</span>; arr[by][bx] = <span class="number">0</span>; arr[cy][cx] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line"><span class="keyword">if</span>(arr[i][j] == <span class="number">1</span>) wal++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ay = <span class="number">1</span>; ay &lt;= n; ay++)</span><br><span class="line"><span class="keyword">for</span>(ax = <span class="number">1</span>; ax &lt;= m; ax++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[ay][ax]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(by = <span class="number">1</span>; by &lt;= n; by++)</span><br><span class="line"><span class="keyword">for</span>(bx = <span class="number">1</span>; bx &lt;= m; bx++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[by][bx]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(cy = <span class="number">1</span>; cy &lt;= n; cy++)</span><br><span class="line"><span class="keyword">for</span>(cx = <span class="number">1</span>; cx &lt;= m; cx++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[cy][cx]) <span class="keyword">continue</span>;</span><br><span class="line">vir = min(vir, solve());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n * m - vir - wal - <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/24/20200524-boj14502/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1012 - 유기농 배추</title>
      <link>https://yhcho0405.github.io/2020/05/21/20200521-boj1012/</link>
      <guid>https://yhcho0405.github.io/2020/05/21/20200521-boj1012/</guid>
      <pubDate>Wed, 20 May 2020 17:12:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;배열을 순회하며 배추를 만나면 그 지점부터 bfs나 dfs를 돌리며 모두 0으로 초기화한다.&lt;br&gt;이 과정을 반복해 모둔 배추 영역을 찾은 후 그 영역의 갯수를 출력하면 된다.&lt;br&gt;bfs와 dfs모두 다뤄보겠다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>배열을 순회하며 배추를 만나면 그 지점부터 bfs나 dfs를 돌리며 모두 0으로 초기화한다.<br>이 과정을 반복해 모둔 배추 영역을 찾은 후 그 영역의 갯수를 출력하면 된다.<br>bfs와 dfs모두 다뤄보겠다.</p><a id="more"></a><br><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t, m, n, k, sx, sy, xx, yy, cx, cy, arr[<span class="number">52</span>][<span class="number">52</span>], dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ans;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx, qy;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!qx.empty()) &#123;</span><br><span class="line">sx = qx.front(); qx.pop();</span><br><span class="line">sy = qy.front(); qy.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = sx + dx[i];</span><br><span class="line">yy = sy + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt; m || yy &gt; n || xx &lt; <span class="number">1</span> || yy &lt; <span class="number">1</span> || !arr[yy][xx]) <span class="keyword">continue</span>;</span><br><span class="line">arr[yy][xx] = <span class="number">0</span>;</span><br><span class="line">qx.push(xx), qy.push(yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cx &gt;&gt; cy;</span><br><span class="line">arr[cy + <span class="number">1</span>][cx + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j]) &#123;</span><br><span class="line">qx.push(j), qy.push(i);</span><br><span class="line">bfs(j, i);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t, m, n, k, cx, cy, xx, yy, arr[<span class="number">52</span>][<span class="number">52</span>], dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">arr[y][x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">xx = x + dx[i];</span><br><span class="line">yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span>(xx &gt; m || yy &gt; n || xx &lt; <span class="number">1</span> || yy &lt; <span class="number">1</span> || !arr[yy][xx]) <span class="keyword">continue</span>;</span><br><span class="line">dfs(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line"><span class="keyword">while</span>(k--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cx &gt;&gt; cy;</span><br><span class="line">arr[cy + <span class="number">1</span>][cx + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j]) &#123;</span><br><span class="line">dfs(j, i);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/21/20200521-boj1012/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 1697 - 숨바꼭질</title>
      <link>https://yhcho0405.github.io/2020/05/20/20200520-boj1697/</link>
      <guid>https://yhcho0405.github.io/2020/05/20/20200520-boj1697/</guid>
      <pubDate>Wed, 20 May 2020 06:54:00 GMT</pubDate>
      <description>
      
        &lt;p&gt; bfs로 &lt;code&gt;n + 1&lt;/code&gt;, &lt;code&gt;n - 1&lt;/code&gt;, &lt;code&gt;n * 2&lt;/code&gt;의 경우를 계속 탐색해나가며 동생의 위치에 가장 먼저 도달한 경우의 횟수를 출력하면 된다.&lt;br&gt; 트리를 그려보면 알겠지만 중복되는 경우가 자주 등장해서 메모이제이션을 사용하지 않으면 메모리 초과가 뜬다.&lt;br&gt; 방문을 저장할 배열 하나를 만들어준다.  &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p> bfs로 <code>n + 1</code>, <code>n - 1</code>, <code>n * 2</code>의 경우를 계속 탐색해나가며 동생의 위치에 가장 먼저 도달한 경우의 횟수를 출력하면 된다.<br> 트리를 그려보면 알겠지만 중복되는 경우가 자주 등장해서 메모이제이션을 사용하지 않으면 메모리 초과가 뜬다.<br> 방문을 저장할 배열 하나를 만들어준다.  </p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, sn, sc, ans, v[<span class="number">101010</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q, cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">q.push(n), cnt.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">sn = q.front(); q.pop();</span><br><span class="line">sc = cnt.front(); cnt.pop();</span><br><span class="line"><span class="keyword">if</span>(sn &lt; <span class="number">0</span> || sn &gt; <span class="number">100000</span>) <span class="keyword">continue</span>; <span class="keyword">if</span>(v[sn]) <span class="keyword">continue</span>; <span class="comment">// runtime</span></span><br><span class="line">v[sn] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sn == k) &#123;</span><br><span class="line">ans = sc;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(sn * <span class="number">2</span>), cnt.push(sc + <span class="number">1</span>);</span><br><span class="line">q.push(sn + <span class="number">1</span>), cnt.push(sc + <span class="number">1</span>);</span><br><span class="line">q.push(sn - <span class="number">1</span>), cnt.push(sc + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/20/20200520-boj1697/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 7576 - 토마토</title>
      <link>https://yhcho0405.github.io/2020/05/20/20200520-boj7576/</link>
      <guid>https://yhcho0405.github.io/2020/05/20/20200520-boj7576/</guid>
      <pubDate>Wed, 20 May 2020 06:04:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;익은 토마토의 위치를 전부 큐에 넣고 bfs를 돌린다.&lt;br&gt;익혀진 토마토의 배열 위치에 익혀진 날짜의 값을 저장한다.  &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>익은 토마토의 위치를 전부 큐에 넣고 bfs를 돌린다.<br>익혀진 토마토의 배열 위치에 익혀진 날짜의 값을 저장한다.  </p><a id="more"></a><p>결과적으로 익은 토마토의 주변에 안 익은 토마토가 있다면 <code>익은토마토의 인덱스에 담긴 값 + 1</code>을 안 익은 토마토의 값에 넣은 후 위치를 큐에 넣는다.</p><p>bfs가 끝나고 배열을 전부 순회하면서 0이 있다면 못 익힌 토마토가 있다는 것이므로 -1을 출력하고 아니라면 담긴 값 중 가장 큰 값을 출력하면 된다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">1002</span>][<span class="number">1002</span>], x, y, cx, cy, dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ans;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx, qy;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line"><span class="keyword">if</span>(arr[i][j] == <span class="number">1</span>) qx.push(j), qy.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!qx.empty()) &#123;</span><br><span class="line">x = qx.front(); qx.pop();</span><br><span class="line">y = qy.front(); qy.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">cx = x + dx[i];</span><br><span class="line">cy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span>(cx &gt; n || cy &gt; m || cx &lt; <span class="number">1</span> || cy &lt; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(arr[cy][cx] == <span class="number">0</span>) &#123;</span><br><span class="line">arr[cy][cx] = arr[y][x] + <span class="number">1</span>;</span><br><span class="line">qx.push(cx), qy.push(cy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!arr[i][j]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; arr[i][j]) ans = arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/20/20200520-boj7576/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2667 - 단지번호붙이기</title>
      <link>https://yhcho0405.github.io/2020/05/19/20200519-boj2667/</link>
      <guid>https://yhcho0405.github.io/2020/05/19/20200519-boj2667/</guid>
      <pubDate>Tue, 19 May 2020 14:08:00 GMT</pubDate>
      <description>
      
        &lt;p&gt; 지도를 배열에 저장하고 칸별로 분기를 돌며 집이 있는 칸을 만나면 인접한 집들을 탐색한다.&lt;br&gt; 위 과정을 반복해 단지를 나누고 집의 수를 벡터에 저장한 후 정렬해 출력한다.&lt;br&gt; bfs dfs 두 방법 모두 다뤄보겠다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p> 지도를 배열에 저장하고 칸별로 분기를 돌며 집이 있는 칸을 만나면 인접한 집들을 탐색한다.<br> 위 과정을 반복해 단지를 나누고 집의 수를 벡터에 저장한 후 정렬해 출력한다.<br> bfs dfs 두 방법 모두 다뤄보겠다.</p><a id="more"></a><p>두 방법 모두 한번 탐색한 집은 배열에서 삭제하므로 다음 분기에서 중복탐색하지 않는다.<br>덕분에 bfs에서 삭제 횟수가 해당 단지의 집 수가 된다.<br><br></p><p>bfs는 처음으로 집을 발견한 위치를 기준으로 상하좌우를 탐색하며 큐에 넣는다.<br>탐색하며 삭제한 집의 갯수가 곧 단지내의 집 수이기 때문에 그 값을 리턴한다.<br>리턴된 값을 벡터에 넣고 정렬 후 출력한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, v[<span class="number">27</span>][<span class="number">27</span>], sx, sy, sc, cnt;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx, qy;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">qx.push(x), qy.push(y);</span><br><span class="line"><span class="keyword">while</span>(!(qx.empty() &amp;&amp; qy.empty())) &#123;</span><br><span class="line">sx = qx.front(); qx.pop();</span><br><span class="line">sy = qy.front(); qy.pop();</span><br><span class="line"><span class="keyword">if</span>(!v[sy][sx]) <span class="keyword">continue</span>;</span><br><span class="line">v[sy][sx] = <span class="number">0</span>; cnt++;</span><br><span class="line"><span class="keyword">if</span>(v[sy - <span class="number">1</span>][sx]) qx.push(sx), qy.push(sy - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(v[sy + <span class="number">1</span>][sx]) qx.push(sx), qy.push(sy + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(v[sy][sx - <span class="number">1</span>]) qx.push(sx - <span class="number">1</span>), qy.push(sy);</span><br><span class="line"><span class="keyword">if</span>(v[sy][sx + <span class="number">1</span>]) qx.push(sx + <span class="number">1</span>), qy.push(sy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;v[i][j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span>(v[i][j]) ans.push_back(bfs(j, i));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(ans.begin(), ans.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>dfs를 사용한 방법도 마찬가지로 지도 전체를 돌며 집을 발견한 위치를 시작점으로 탐색을 수행한다.<br>상하좌우 더 이상 이동할 공간이 없을때까지 재귀적으로 탐색하고 1씩 더해나간다.<br>최종적으로 dfs 탐색과정을 트리를 그리면 최하단 노드에는 1이 담기고 각 부모노드에는 자식노드 들의 합이 담겨있는 형태가 될 것이다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, arr[<span class="number">27</span>][<span class="number">27</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!arr[y][x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">arr[y][x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> dfs(x - <span class="number">1</span>, y) + dfs(x + <span class="number">1</span>, y) + dfs(x, y - <span class="number">1</span>) + dfs(x, y + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;arr[i][j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i][j]) ans.push_back(dfs(j, i));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(ans.begin(), ans.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/19/20200519-boj2667/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[C++]BOJ 2178 - 미로 탐색</title>
      <link>https://yhcho0405.github.io/2020/05/19/20200519-boj2178/</link>
      <guid>https://yhcho0405.github.io/2020/05/19/20200519-boj2178/</guid>
      <pubDate>Tue, 19 May 2020 09:10:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;각 칸에서 이동할 수 있는 칸으로 탐색해나가 도착점에 도달하면 그 이동 거리가 최소 거리가 되므로 bfs를 사용하면 빠르게 해결할 수 있다.&lt;br&gt;dfs로도 해결할 수 있지만 한번 방문한 칸은 다신 방문하지 않는 bfs와는 다르게 모든 경로를 탐색하므로 작동시간이 다소 오래걸린다.&lt;/p&gt;
&lt;p&gt;두 방법 모두 다뤄보겠다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>각 칸에서 이동할 수 있는 칸으로 탐색해나가 도착점에 도달하면 그 이동 거리가 최소 거리가 되므로 bfs를 사용하면 빠르게 해결할 수 있다.<br>dfs로도 해결할 수 있지만 한번 방문한 칸은 다신 방문하지 않는 bfs와는 다르게 모든 경로를 탐색하므로 작동시간이 다소 오래걸린다.</p><p>두 방법 모두 다뤄보겠다.</p><a id="more"></a><br><p>우선 bfs를 사용한 방법은 x, y방향, 이동횟수 큐를 만들어서 각각 1을 넣어준다. (<code>시작점 좌표(1, 1)</code>, <code>시작 이동횟수 = 1</code>)<br>이후 상하좌우로 이동할 수 있는 칸을 큐에 계속 넣어주고 이동횟수도 업데이트한다.<br>큐가 비었거나 도착점에 도달하면 종료 후 이동횟수를 출력한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qx, qy, qc;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">101</span>][<span class="number">101</span>], v[<span class="number">101</span>][<span class="number">101</span>], sx, sy, sc, ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; m || x &lt; <span class="number">1</span> || y &gt; n || y &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!arr[y][x]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(v[y][x]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;arr[i][j]);</span><br><span class="line">qx.push(<span class="number">1</span>), qy.push(<span class="number">1</span>), qc.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!qx.empty()) &#123;</span><br><span class="line">sx = qx.front(); qx.pop();</span><br><span class="line">sy = qy.front(); qy.pop();</span><br><span class="line">sc = qc.front(); qc.pop();</span><br><span class="line"><span class="keyword">if</span>(v[sy][sx]) <span class="keyword">continue</span>;</span><br><span class="line">v[sy][sx] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sx == m &amp;&amp; sy == n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(chk(sx - <span class="number">1</span>, sy)) qx.push(sx - <span class="number">1</span>), qy.push(sy), qc.push(sc + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(chk(sx + <span class="number">1</span>, sy)) qx.push(sx + <span class="number">1</span>), qy.push(sy), qc.push(sc + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(chk(sx, sy - <span class="number">1</span>)) qx.push(sx), qy.push(sy - <span class="number">1</span>), qc.push(sc + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(chk(sx, sy + <span class="number">1</span>)) qx.push(sx), qy.push(sy + <span class="number">1</span>), qc.push(sc + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>dfs를 사용한 방법은 앞서 설명한 bfs보다 간단하다.<br>이동할 수 있는 모든 칸을 찾으며 각 칸까지 도달하는데 최소 이동횟수를 저장한다.<br>도착점에 저장된 이동횟수를 출력한다.<br>모든 경우를 탐색하므로 시간이 오래 걸린다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">101</span>][<span class="number">101</span>], ans[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!arr[y][x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; m || y &gt; n) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(ans[y][x] &lt;= cnt &amp;&amp; ans[y][x]) <span class="keyword">return</span>;</span><br><span class="line">ans[y][x] = cnt;</span><br><span class="line">dfs(x - <span class="number">1</span>, y, cnt + <span class="number">1</span>);</span><br><span class="line">dfs(x + <span class="number">1</span>, y, cnt + <span class="number">1</span>);</span><br><span class="line">dfs(x, y - <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">dfs(x, y + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;arr[i][j]);</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/05/19/20200519-boj2178/#disqus_thread</comments>
    </item>
    
    <item>
      <title>파이썬 - 네이버 영화 크롤링</title>
      <link>https://yhcho0405.github.io/2020/04/15/20200415-python-movie-crawling/</link>
      <guid>https://yhcho0405.github.io/2020/04/15/20200415-python-movie-crawling/</guid>
      <pubDate>Wed, 15 Apr 2020 13:50:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;네이버 영화 페이지에서 현재 상영중인 영화와 정보들을 가져오고 각 영화에 달린 댓글들도 가져오는 파이썬 크롤러를 만들어 봤다.&lt;br&gt;모듈은 requests와 beautifulsoup4를 사용했다.&lt;br&gt;requests로 HTTP요청을 보내고 beautifulsoup4는 html구문을 분석할 때 사용했다.&lt;br&gt;마지막으로 크롤링이 끝난 후 csv형식으로 내보낸다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>네이버 영화 페이지에서 현재 상영중인 영화와 정보들을 가져오고 각 영화에 달린 댓글들도 가져오는 파이썬 크롤러를 만들어 봤다.<br>모듈은 requests와 beautifulsoup4를 사용했다.<br>requests로 HTTP요청을 보내고 beautifulsoup4는 html구문을 분석할 때 사용했다.<br>마지막으로 크롤링이 끝난 후 csv형식으로 내보낸다.</p><a id="more"></a><p><strong><em>내용 추가 예정</em></strong></p><blockquote><p><a href="https://docs.google.com/spreadsheets/d/19u8H0vsYq4FNuS_yd3jA89wlkTdBUtSbmP7zmMYeVz0/edit?usp=sharing" rel="external nofollow noopener noreferrer" target="_blank">크롤링 결과 csv파일</a></p></blockquote><blockquote><p><a href="https://test.yhcho0405.repl.run" rel="external nofollow noopener noreferrer" target="_blank">이 링크를 통해 repl.it에서 가상으로 테스트 할 수 있다.</a></p></blockquote><blockquote><p><a href="https://github.com/yhcho0405/python_movie_crawling" rel="external nofollow noopener noreferrer" target="_blank">소스코드</a></p></blockquote><br><h4 id="2020년-4월-21일"><a href="#2020년-4월-21일" class="headerlink" title="2020년 4월 21일"></a>2020년 4월 21일</h4><p>너무 허전해보여서 flask로 웹에서 돌아가게 만들어 보았다.</p><blockquote><p><a href="https://scrapper.yhcho0405.repl.co" rel="external nofollow noopener noreferrer" target="_blank">역시나 repl.it의 서버를 사용하기 때문에 크롤링 속도가 굉장히 느리다.</a><br>page 값으로 0을 넣으면 빠른 결과를 얻을 수 있다.<br>대신 댓글은 가져오지 못한다.</p></blockquote>]]></content:encoded>
      
      <comments>https://yhcho0405.github.io/2020/04/15/20200415-python-movie-crawling/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
